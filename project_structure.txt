
==================================================================
FILE: ./api/auth.tsx
==================================================================
import API_INSTANCE from "./index";

export const userLogin = async (data: object) => {
  const res = await API_INSTANCE.post("/user/login", data);
  return res;
};

export const getCurrentUser = async () => {
  try {
    const res = await API_INSTANCE.get("/user/current-user");
    return res;
  } catch (error) {
    console.log(error);
  }
};

export const userLogout = async () => {
  try {
    const res = await API_INSTANCE.post("/user/logout");
    return res;
  } catch (error) {
    console.log(error);
  }
};




==================================================================
FILE: ./api/index.tsx
==================================================================
import { getToken } from "@/utils/getToken";
import axios from "axios";
import { toast } from "react-hot-toast";

export const prefix = "/api/v1";
export const baseurl = "http://localhost:9010";
// export const baseurl = "https://inventory-backend.rightlabs.live";
export const url = baseurl + prefix;

// Helper function to get token from cookies

// Create axios instance with base configuration
const API_INSTANCE = axios.create({
  baseURL: url,
  headers: {
    "Content-Type": "application/json",
  },
});

// Request interceptor
API_INSTANCE.interceptors.request.use(
  (config) => {
    const token = getToken();
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => {
    console.error("Error in request configuration:", error);
    return Promise.reject(error);
  }
);

// Response interceptor
API_INSTANCE.interceptors.response.use(
  (response) => response,
  (error) => {
    if (error.response) {
      // Server responded with an error status code
      if (error.response.status === 403) {
        toast.error("Session expired! Please login again.");
        localStorage.removeItem("token"); // Clear token
        window.location.href = "/"; // Redirect to login page
      } else {
        // Handle other error responses
        const errorMessage =
          error.response.data?.message || "An error occurred";
        toast.error(errorMessage);
      }
    } else if (error.request) {
      // Request was made but no response received
      toast.error("No response from server. Please try again.");
    } else {
      // Error in request configuration
      toast.error("Request failed. Please try again.");
    }
    return Promise.reject(error);
  }
);

export default API_INSTANCE;




==================================================================
FILE: ./api/items.tsx
==================================================================
import API_INSTANCE from "./index";

export type ItemType = "PipeSheet" | "Fitting" | "Polish";

// Base item interface
interface BaseItem {
  _id: string;
  code: string;
  name: string;
  currentStock: number;
  minimumStock: number;
  purchaseRate: number;
  sellingRate: number;
  margin: number;
  gst: number;
  lastPurchaseDate?: string;
  unitType: "weight" | "pieces";
  status: "in_stock" | "low_stock" | "out_of_stock";
}

// Specific item interfaces
interface PipeSheetItem extends BaseItem {
  itemType: "PipeSheet";
  type: "pipe" | "sheet";
  grade: "304" | "202";
  size: string;
  gauge: string;
  weight: number;
}

interface FittingItem extends BaseItem {
  itemType: "Fitting";
  subCategory: string;
  size: string;
  type: "Round" | "Square";
  variant?: "One Side" | "Two Side" | null;
  weight?: number;
}

interface PolishItem extends BaseItem {
  itemType: "Polish";
  type: string;
  subCategory: string;
  specification: string;
  variant?: "One Side" | "Two Side" | null;
}

export type InventoryItem = PipeSheetItem | FittingItem | PolishItem;

export interface ItemFilters {
  type?: ItemType;
  subCategory?: string;
  searchTerm?: string;
  startDate?: string;
  endDate?: string;
}

interface ApiResponse<T> {
  success: boolean;
  data: T;
  message?: string;
}

export const getItems = async (filters?: ItemFilters) => {
  try {
    const queryParams = new URLSearchParams();

    if (filters?.type) {
      queryParams.append("type", filters.type);
    }

    // Modified subcategory handling
    if (filters?.subCategory && filters.subCategory !== "all") {
      // For polish items, we need to handle the type field differently
      if (filters.type === "Polish") {
        queryParams.append("type", filters.subCategory); // This matches the backend expectation
      } else {
        queryParams.append("subCategory", filters.subCategory);
      }
    }

    if (filters?.searchTerm) {
      queryParams.append("search", filters.searchTerm);
    }

    if (filters?.startDate) {
      queryParams.append("startDate", filters.startDate);
    }

    if (filters?.endDate) {
      queryParams.append("endDate", filters.endDate);
    }

    const res = await API_INSTANCE.get<ApiResponse<InventoryItem[]>>(
      `/items?${queryParams}`
    );

    return res;
  } catch (error) {
    console.error("API Error:", error);
    throw error;
  }
};

export const createItem = async (data: Omit<InventoryItem, "_id">) => {
  try {
    const res = await API_INSTANCE.post<ApiResponse<InventoryItem>>(
      "/items",
      data
    );
    return res;
  } catch (error) {
    throw error;
  }
};

export const updateItem = async (
  itemId: string,
  data: Partial<InventoryItem>
) => {
  try {
    const res = await API_INSTANCE.put<ApiResponse<InventoryItem>>(
      `/items/${itemId}`,
      data
    );
    return res;
  } catch (error) {
    throw error;
  }
};

export const getItemHistory = async (
  itemId: string,
  filters?: {
    startDate?: string;
    endDate?: string;
  }
) => {
  try {
    const queryParams = new URLSearchParams();
    if (filters?.startDate) queryParams.append("startDate", filters.startDate);
    if (filters?.endDate) queryParams.append("endDate", filters.endDate);

    const res = await API_INSTANCE.get(
      `/items/${itemId}/history?${queryParams}`
    );
    return res;
  } catch (error) {
    throw error;
  }
};




==================================================================
FILE: ./api/purchase.tsx
==================================================================
// api/purchase.ts

import { PurchaseFormData } from "@/components/Forms/PurchaseForm";
import API_INSTANCE from "./index";

interface PurchaseFilters {
  page?: number;
  limit?: number;
  status?: string;
  paymentStatus?: string;
  startDate?: string;
  endDate?: string;
  vendorId?: string;
}

export const createPurchase = async (data: PurchaseFormData) => {
  try {
    const res = await API_INSTANCE.post("/purchase", data);
    return res;
  } catch (error) {
    if (error instanceof Error) {
      throw new Error(error.message);
    }
    throw new Error("Failed to create purchase");
  }
};

export const getPurchases = async (filters?: PurchaseFilters) => {
  try {
    const queryParams = new URLSearchParams();
    if (filters) {
      Object.entries(filters).forEach(([key, value]) => {
        if (value) queryParams.append(key, value.toString());
      });
    }

    const res = await API_INSTANCE.get(`/purchase?${queryParams.toString()}`);
    return res;
  } catch (error) {
    if (error instanceof Error) {
      throw new Error(error.message);
    }
    throw new Error("Failed to fetch purchases");
  }
};




==================================================================
FILE: ./api/transaction.tsx
==================================================================
import API_INSTANCE from "./index";

export const getVendorLedger = async (
  vendorId: string,
  filters?: {
    startDate?: string;
    endDate?: string;
  }
) => {
  try {
    const queryParams = new URLSearchParams();
    if (filters?.startDate) queryParams.append("startDate", filters.startDate);
    if (filters?.endDate) queryParams.append("endDate", filters.endDate);

    const res = await API_INSTANCE.get(
      `/ledger/vendor/${vendorId}?${queryParams}`
    );
    return res;
  } catch (error) {
    throw error;
  }
};

export const addPayment = async (
  purchaseId: string,
  data: {
    amount: number;
    mode: "cash" | "cheque" | "online";
    reference?: string;
    notes?: string;
  }
) => {
  try {
    const res = await API_INSTANCE.post(
      `/purchase/${purchaseId}/payments`,
      data
    );
    return res;
  } catch (error) {
    throw error;
  }
};




==================================================================
FILE: ./api/vendor.tsx
==================================================================
import API_INSTANCE from "./index";

export const getVendors = async () => {
  try {
    const res = await API_INSTANCE.get("/vendor");
    return res;
  } catch (error) {
    console.log(error);
  }
};

export const addVendor = async (data: object) => {
  try {
    const res = await API_INSTANCE.post("/vendor", data);
    return res;
  } catch (error) {
    console.log(error);
  }
};




==================================================================
FILE: ./app/(auth)/layout.tsx
==================================================================
export default function AuthLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return children;
}




==================================================================
FILE: ./app/(auth)/page.tsx
==================================================================
"use client";

import Cookies from "js-cookie";
import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Eye, EyeOff, Loader2 } from "lucide-react";
import { userLogin } from "@/api/auth";
import toast from "react-hot-toast";
import { ErrorResponse } from "@/types/type";
import { AxiosError } from "axios";

export default function LoginPage() {
  const [showPassword, setShowPassword] = useState(false);
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [isLoading, setIsLoading] = useState(false);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsLoading(true);
    try {
      const res = await userLogin({ email, password });
      if (res.data.statusCode == 200 || res.data.statusCode == 201) {
        Cookies.set("authToken", res.data.data.accessToken);
        toast.success("Login successful");
        window.location.href = "/dashboard";
      }
    } catch (error) {
      const axiosError = error as AxiosError<ErrorResponse>;
      const errorMessage =
        axiosError.response?.data?.message || "Invalid email or password";
      console.log(errorMessage);
      toast.error(errorMessage);
    } finally {
      setIsLoading(false);
    }
  };

  // Handle Enter key press
  useEffect(() => {
    const handleKeyPress = (e: KeyboardEvent) => {
      if (e.key === "Enter" && email && password) {
        handleSubmit(e as any);
      }
    };

    document.addEventListener("keypress", handleKeyPress);
    return () => document.removeEventListener("keypress", handleKeyPress);
  }, [email, password]);

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-50 ">
      <div className="absolute inset-0">
        <div className="absolute inset-y-0 left-0 w-1/2 bg-white" />
        <div className="absolute inset-y-0 right-0 w-1/2 bg-gray-50" />
      </div>
      <div className="relative max-w-md w-full">
        <Card className="border-none shadow-2xl">
          <CardHeader className="space-y-2 text-center">
            <div className="flex justify-center mb-4">
              <h1 className="text-2xl font-bold text-primary">
                Gayatri Industries
              </h1>
            </div>
            <CardTitle className="text-xl">Welcome back</CardTitle>
            <CardDescription>Sign in to access your account</CardDescription>
          </CardHeader>
          <CardContent>
            <form onSubmit={handleSubmit} className="space-y-4">
              <div className="space-y-2">
                <label
                  className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
                  htmlFor="email"
                >
                  Email
                </label>
                <Input
                  id="email"
                  type="email"
                  placeholder="Enter your email"
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  required
                  disabled={isLoading}
                  className="bg-white"
                />
              </div>
              <div className="space-y-2">
                <label
                  className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
                  htmlFor="password"
                >
                  Password
                </label>
                <div className="relative">
                  <Input
                    id="password"
                    type={showPassword ? "text" : "password"}
                    placeholder="Enter your password"
                    value={password}
                    onChange={(e) => setPassword(e.target.value)}
                    required
                    disabled={isLoading}
                    className="bg-white"
                  />
                  <button
                    type="button"
                    onClick={() => setShowPassword(!showPassword)}
                    className="absolute right-3 top-1/2 -translate-y-1/2 text-gray-500 hover:text-gray-700"
                    disabled={isLoading}
                  >
                    {showPassword ? (
                      <EyeOff className="h-4 w-4" />
                    ) : (
                      <Eye className="h-4 w-4" />
                    )}
                  </button>
                </div>
              </div>

              <Button type="submit" className="w-full" disabled={isLoading}>
                {isLoading ? (
                  <>
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    Signing in...
                  </>
                ) : (
                  "Sign in"
                )}
              </Button>
            </form>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}




==================================================================
FILE: ./app/(dashboard)/client-layout.tsx
==================================================================
"use client";

import { Sidebar } from "@/components/sidebar";
import { Header } from "@/components/header";

export default function ClientLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <div className="flex h-screen overflow-hidden bg-gray-50">
      <Sidebar />
      <div className="flex-1 flex flex-col overflow-hidden">
        <Header />
        <main className="flex-1 overflow-y-auto p-6">{children}</main>
      </div>
    </div>
  );
}




==================================================================
FILE: ./app/(dashboard)/customers/page.tsx
==================================================================
"use client";

import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Download,
  Plus,
  User,
  Phone,
  Mail,
  MapPin,
  AlertCircle,
  FileText,
  IndianRupee,
} from "lucide-react";
import { Alert, AlertDescription } from "@/components/ui/alert";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";

interface Customer {
  id: string;
  name: string;
  type: "retail" | "wholesale" | "distributor";
  gstin?: string;
  contactPerson: string;
  phone: string;
  email: string;
  address: string;
  creditLimit: number;
  currentBalance: number;
  status: "active" | "inactive";
  paymentTerms: string;
  lastPurchase?: string;
  totalPurchases: number;
  createdAt: string;
}

export default function CustomersPage() {
  const [open, setOpen] = useState(false);

  // Sample customers data
  const customers: Customer[] = [
    {
      id: "C001",
      name: "Global Traders",
      type: "wholesale",
      gstin: "09AAACH7409R1ZZ",
      contactPerson: "Rahul Kumar",
      phone: "+91 9876543210",
      email: "rahul@globaltraders.com",
      address: "123, Industrial Area, Phase 1, New Delhi - 110020",
      creditLimit: 500000,
      currentBalance: 125000,
      status: "active",
      paymentTerms: "Net 30",
      lastPurchase: "2024-03-15",
      totalPurchases: 1250000,
      createdAt: "2023-01-15",
    },
    {
      id: "C002",
      name: "City Hardware",
      type: "retail",
      gstin: "07BBBCH8809R1ZZ",
      contactPerson: "Amit Shah",
      phone: "+91 9876543211",
      email: "amit@cityhardware.com",
      address: "456, Market Road, Mumbai - 400001",
      creditLimit: 200000,
      currentBalance: 75000,
      status: "active",
      paymentTerms: "Net 15",
      lastPurchase: "2024-03-18",
      totalPurchases: 850000,
      createdAt: "2023-03-20",
    },
  ];

  const StatusBadge = ({ status }: { status: Customer["status"] }) => {
    const styles = {
      active: "bg-green-100 text-green-800",
      inactive: "bg-gray-100 text-gray-800",
    };

    return (
      <span
        className={`inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-medium ${styles[status]}`}
      >
        {status.charAt(0).toUpperCase() + status.slice(1)}
      </span>
    );
  };

  const TypeBadge = ({ type }: { type: Customer["type"] }) => {
    const styles = {
      retail: "bg-blue-100 text-blue-800",
      wholesale: "bg-purple-100 text-purple-800",
      distributor: "bg-orange-100 text-orange-800",
    };

    return (
      <span
        className={`inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-medium ${styles[type]}`}
      >
        {type.charAt(0).toUpperCase() + type.slice(1)}
      </span>
    );
  };

  return (
    <div className="space-y-8">
      {/* Page Header */}
      <div className="flex justify-between items-center">
        <div>
          <h1 className="text-3xl font-bold tracking-tight">Customers</h1>
          <p className="text-sm text-muted-foreground mt-1">
            Manage your customers and their accounts
          </p>
        </div>
        <Dialog open={open} onOpenChange={setOpen}>
          <DialogTrigger asChild>
            <Button className="bg-primary">
              <Plus className="mr-2 h-4 w-4" /> Add Customer
            </Button>
          </DialogTrigger>
          <DialogContent className="sm:max-w-[800px] max-h-[85vh] overflow-y-auto">
            <DialogHeader>
              <DialogTitle>Add New Customer</DialogTitle>
              <DialogDescription>
                Enter customer details and business information
              </DialogDescription>
            </DialogHeader>

            <div className="grid gap-6 py-4">
              {/* Basic Information */}
              <div className="grid gap-4">
                <div>
                  <label className="text-sm font-medium mb-1 block">
                    Business/Customer Name*
                  </label>
                  <Input placeholder="Enter business name" />
                </div>
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className="text-sm font-medium mb-1 block">
                      Customer Type*
                    </label>
                    <Select>
                      <SelectTrigger>
                        <SelectValue placeholder="Select type" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="retail">Retail</SelectItem>
                        <SelectItem value="wholesale">Wholesale</SelectItem>
                        <SelectItem value="distributor">Distributor</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  <div>
                    <label className="text-sm font-medium mb-1 block">
                      GSTIN
                    </label>
                    <Input placeholder="Enter GSTIN (if applicable)" />
                  </div>
                </div>
              </div>

              {/* Contact Information */}
              <div className="grid gap-4">
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className="text-sm font-medium mb-1 block">
                      Contact Person*
                    </label>
                    <Input placeholder="Enter contact person name" />
                  </div>
                  <div>
                    <label className="text-sm font-medium mb-1 block">
                      Phone Number*
                    </label>
                    <Input placeholder="Enter phone number" />
                  </div>
                </div>
                <div>
                  <label className="text-sm font-medium mb-1 block">
                    Email Address
                  </label>
                  <Input type="email" placeholder="Enter email address" />
                </div>
                <div>
                  <label className="text-sm font-medium mb-1 block">
                    Business Address*
                  </label>
                  <Input placeholder="Enter complete address" />
                </div>
              </div>

              {/* Financial Information */}
              <div className="grid gap-4">
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className="text-sm font-medium mb-1 block">
                      Credit Limit
                    </label>
                    <Input type="number" placeholder="Enter credit limit" />
                  </div>
                  <div>
                    <label className="text-sm font-medium mb-1 block">
                      Payment Terms
                    </label>
                    <Select>
                      <SelectTrigger>
                        <SelectValue placeholder="Select terms" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="immediate">Immediate</SelectItem>
                        <SelectItem value="net15">Net 15</SelectItem>
                        <SelectItem value="net30">Net 30</SelectItem>
                        <SelectItem value="net45">Net 45</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </div>
                <div>
                  <label className="text-sm font-medium mb-1 block">
                    Opening Balance
                  </label>
                  <Input type="number" placeholder="Enter opening balance" />
                </div>
              </div>

              <Alert>
                <AlertCircle className="h-4 w-4" />
                <AlertDescription>
                  Set appropriate credit limits based on customer type and
                  payment history.
                </AlertDescription>
              </Alert>
            </div>

            {/* Action Buttons */}
            <div className="flex justify-end gap-2 mt-4">
              <Button variant="outline" onClick={() => setOpen(false)}>
                Cancel
              </Button>
              <Button>Add Customer</Button>
            </div>
          </DialogContent>
        </Dialog>
      </div>

      {/* Customers List Section */}
      <Card>
        <CardHeader className="pb-3">
          <div className="flex justify-between items-start">
            <div>
              <CardTitle className="text-xl font-semibold">
                Customer List
              </CardTitle>
              <p className="text-sm text-muted-foreground mt-1">
                View and manage your customer information
              </p>
            </div>
            <div className="flex gap-2">
              <Button variant="outline" size="sm">
                <Download className="h-4 w-4 mr-2" /> Export
              </Button>
            </div>
          </div>
        </CardHeader>
        <CardContent>
          <div className="rounded-md border">
            <table className="w-full">
              <thead>
                <tr className="border-b bg-muted/50">
                  <th className="h-12 px-4 text-left align-middle text-sm font-medium text-muted-foreground">
                    ID
                  </th>
                  <th className="h-12 px-4 text-left align-middle text-sm font-medium text-muted-foreground">
                    Customer
                  </th>
                  <th className="h-12 px-4 text-left align-middle text-sm font-medium text-muted-foreground">
                    Type
                  </th>
                  <th className="h-12 px-4 text-left align-middle text-sm font-medium text-muted-foreground">
                    Contact
                  </th>
                  <th className="h-12 px-4 text-right align-middle text-sm font-medium text-muted-foreground">
                    Credit Limit
                  </th>
                  <th className="h-12 px-4 text-right align-middle text-sm font-medium text-muted-foreground">
                    Balance
                  </th>
                  <th className="h-12 px-4 text-right align-middle text-sm font-medium text-muted-foreground">
                    Total Sales
                  </th>
                  <th className="h-12 px-4 text-left align-middle text-sm font-medium text-muted-foreground">
                    Status
                  </th>
                  <th className="h-12 px-4 text-center align-middle text-sm font-medium text-muted-foreground">
                    Actions
                  </th>
                </tr>
              </thead>
              <tbody>
                {customers.map((customer) => (
                  <tr
                    key={customer.id}
                    className="border-b transition-colors hover:bg-muted/50"
                  >
                    <td className="p-4 align-middle font-medium">
                      {customer.id}
                    </td>
                    <td className="p-4 align-middle">
                      <div>
                        <div className="font-medium">{customer.name}</div>
                        <div className="text-sm text-muted-foreground">
                          {customer.contactPerson}
                        </div>
                      </div>
                    </td>
                    <td className="p-4 align-middle">
                      <TypeBadge type={customer.type} />
                    </td>
                    <td className="p-4 align-middle">
                      <div className="text-sm">
                        <div>{customer.phone}</div>
                        <div className="text-muted-foreground">
                          {customer.email}
                        </div>
                      </div>
                    </td>
                    <td className="p-4 align-middle text-right">
                      ₹{customer.creditLimit.toLocaleString()}
                    </td>
                    <td className="p-4 align-middle text-right">
                      ₹{customer.currentBalance.toLocaleString()}
                    </td>
                    <td className="p-4 align-middle text-right">
                      ₹{customer.totalPurchases.toLocaleString()}
                    </td>
                    <td className="p-4 align-middle">
                      <StatusBadge status={customer.status} />
                    </td>
                    <td className="p-4 align-middle">
                      <div className="flex justify-center gap-2">
                        <Button variant="ghost" size="icon">
                          <FileText className="h-4 w-4 text-muted-foreground" />
                        </Button>
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}




==================================================================
FILE: ./app/(dashboard)/dashboard/page.tsx
==================================================================
import { Card } from "@/components/ui/card";
import { Overview } from "@/components/overview";
import { RecentSales } from "@/components/recent-sales";
import { StatsCards } from "@/components/stats-cards";
import DashboardTopSection from "@/components/dashboard/DashboardTopSection";

export default function DashboardPage() {
  return (
    <div className="flex-1 space-y-6 p-0 bg-[#F8FAFC]">
      <div className="flex items-center justify-between">
        <DashboardTopSection />
      </div>

      <StatsCards />

      <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-7">
        <Card className="col-span-4 border border-gray-100 shadow-sm">
          <div className="p-6">
            <h3 className="text-lg font-medium text-[#1E293B]">
              Revenue vs Costs
            </h3>
            <Overview />
          </div>
        </Card>
        <Card className="col-span-3 border border-gray-100 shadow-sm">
          <div className="p-6">
            <h3 className="text-lg font-medium text-[#1E293B]">Recent Sales</h3>
            <RecentSales />
          </div>
        </Card>
      </div>
    </div>
  );
}




==================================================================
FILE: ./app/(dashboard)/inventory/page.tsx
==================================================================
"use client";

import { useEffect, useState, useCallback } from "react";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Plus, Download, Edit2, Package } from "lucide-react";
import toast from "react-hot-toast";
import { getItems, createItem, updateItem } from "@/api/items";
import ItemForm from "@/components/Forms/ItemForm";

// TypeScript interfaces
interface BaseItem {
  _id: string;
  code: string;
  name: string;
  currentStock: number;
  minimumStock: number;
  purchaseRate: number;
  sellingRate: number;
  margin: number;
  gst: number;
  lastPurchaseDate?: string;
  unitType: "weight" | "pieces";
  status: "in_stock" | "low_stock" | "out_of_stock";
}

interface PipeSheetItem extends BaseItem {
  itemType: "PipeSheet";
  type: "pipe" | "sheet";
  grade: "304" | "202";
  size: string;
  gauge: string;
  weight: number;
  pieces?: number;
}

interface FittingItem extends BaseItem {
  itemType: "Fitting";
  subCategory: string;
  size: string;
  type: "Round" | "Square";
  variant?: "One Side" | "Two Side" | null;
  weight?: number;
}

interface PolishItem extends BaseItem {
  itemType: "Polish";
  type: string;
  subCategory: string;
  specification: string;
  variant?: "One Side" | "Two Side" | null;
}

type InventoryItem = PipeSheetItem | FittingItem | PolishItem;

// Constants
const FITTING_SUBCATEGORIES = [
  "ball",
  "ball_with_nut",
  "base",
  "thali_base",
  "cap",
  "bush",
  "l_drop",
  "stopper",
  "d_lock",
  "hinges",
  "balustred_cap",
  "baluster",
  "master_pillar",
  "starwindow",
  "butterfly",
  "gamla",
  "step",
  "baind",
  "star_ring",
  "ring",
  "bhala",
  "braket",
  "ground_braket",
  "om",
  "swastik",
  "shubh_labh",
  "mel_femel_nut",
  "flower",
  "bail",
  "gate_wheel",
  "gate_opener",
];

const POLISH_SUBCATEGORIES = [
  "Non Woven Pad",
  "Flap Disc",
  "Felt buff Pad",
  "Cutting Blade",
  "Welding Rod",
  "Polish",
  "Grinding Wheel",
  "Core Bit",
].sort();

export default function ItemsPage() {
  const [items, setItems] = useState<InventoryItem[]>([]);
  const [loading, setLoading] = useState(true);
  const [open, setOpen] = useState(false);
  const [selectedType, setSelectedType] = useState<string>("pipes");
  const [searchTerm, setSearchTerm] = useState("");
  const [debouncedSearchTerm, setDebouncedSearchTerm] = useState("");
  const [selectedSubCategory, setSelectedSubCategory] = useState<string>("");
  const [selectedItem, setSelectedItem] = useState<InventoryItem | null>(null);

  // Implement throttling for search
  useEffect(() => {
    const timeoutId = setTimeout(() => {
      setDebouncedSearchTerm(searchTerm);
    }, 500); // 500ms delay

    return () => clearTimeout(timeoutId);
  }, [searchTerm]);

  const fetchItems = useCallback(async () => {
    try {
      setLoading(true);

      let filters;

      if (selectedType === "polish") {
        filters = {
          type: "Polish",
          subCategory:
            selectedSubCategory !== "all" ? selectedSubCategory : undefined,
          searchTerm: debouncedSearchTerm,
        };
      } else {
        filters = {
          type: selectedType === "fittings" ? "Fitting" : "PipeSheet",
          subCategory:
            selectedSubCategory !== "all" ? selectedSubCategory : undefined,
          searchTerm: debouncedSearchTerm,
        };
      }

      const response = await getItems(filters);

      if (response?.data?.success) {
        const items = response.data.data.map((item: InventoryItem) => ({
          ...item,
          status: getItemStatus(item),
        }));
        setItems(items);
      }
    } catch (error) {
      toast.error("Failed to fetch items");
    } finally {
      setLoading(false);
    }
  }, [selectedType, selectedSubCategory, debouncedSearchTerm]);

  useEffect(() => {
    fetchItems();
  }, [fetchItems]);

  useEffect(() => {
    setSelectedSubCategory("");
  }, [selectedType]);

  const EmptyState = ({ message }: { message: string }) => (
    <div className="flex flex-col items-center justify-center py-12 px-4">
      <div className="h-24 w-24 mb-4 text-muted-foreground/50">
        <Package className="h-full w-full" />
      </div>
      <h3 className="text-lg font-medium text-muted-foreground mb-2">
        No items found
      </h3>
      <p className="text-sm text-muted-foreground text-center">{message}</p>
    </div>
  );

  const getItemStatus = (item: InventoryItem): BaseItem["status"] => {
    if (item.currentStock === 0) return "out_of_stock";
    if (item.currentStock <= item.minimumStock) return "low_stock";
    return "in_stock";
  };

  const getEmptyStateMessage = () => {
    if (searchTerm) {
      return `No items found matching "${searchTerm}"`;
    }
    if (selectedSubCategory) {
      return `No items found in the "${selectedSubCategory.replace(
        /_/g,
        " "
      )}" category`;
    }
    return `No ${selectedType.slice(0, -1)} items found in inventory`;
  };

  const renderPipeSheetTable = (items: PipeSheetItem[]) => {
    if (!items.length) {
      return <EmptyState message={getEmptyStateMessage()} />;
    }
    return (
      <table className="w-full">
        <thead>
          <tr className="border-b bg-muted/50">
            <th className="h-12 px-4 text-left align-middle text-sm font-medium text-muted-foreground">
              Name
            </th>
            <th className="h-12 px-4 text-left align-middle text-sm font-medium text-muted-foreground">
              Grade
            </th>
            <th className="h-12 px-4 text-left align-middle text-sm font-medium text-muted-foreground">
              Size
            </th>
            <th className="h-12 px-4 text-left align-middle text-sm font-medium text-muted-foreground">
              Gauge
            </th>
            <th className="h-12 px-4 text-right align-middle text-sm font-medium text-muted-foreground">
              Pieces
            </th>
            <th className="h-12 px-4 text-right align-middle text-sm font-medium text-muted-foreground">
              Current Stock
            </th>
            <th className="h-12 px-4 text-right align-middle text-sm font-medium text-muted-foreground">
              Rate
            </th>
            <th className="h-12 px-4 text-left align-middle text-sm font-medium text-muted-foreground">
              Status
            </th>
            <th className="h-12 px-4 text-center align-middle text-sm font-medium text-muted-foreground">
              Actions
            </th>
          </tr>
        </thead>
        <tbody>
          {items.map((item) => (
            <tr
              key={item._id}
              className="border-b transition-colors hover:bg-muted/50"
            >
              <td className="p-4 align-middle">{item.name}</td>
              <td className="p-4 align-middle">{item.grade}</td>
              <td className="p-4 align-middle">{item.size}</td>
              <td className="p-4 align-middle">{item.gauge}</td>
              <td className="p-4 align-middle text-right">{item.pieces}</td>
              <td className="p-4 align-middle text-right">
                {item.currentStock} ({item.unitType})
              </td>
              <td className="p-4 align-middle text-right">
                ₹{item.purchaseRate.toFixed(2)}
              </td>
              <td className="p-4 align-middle">
                <StatusBadge status={item.status} />
              </td>
              <td className="p-4 align-middle">
                <div className="flex justify-center">
                  <Button
                    variant="ghost"
                    size="icon"
                    onClick={() => {
                      setSelectedItem(item);
                      setOpen(true);
                    }}
                  >
                    <Edit2 className="h-4 w-4 text-muted-foreground" />
                  </Button>
                </div>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    );
  };

  const renderFittingTable = (items: FittingItem[]) => {
    if (!items.length) {
      return <EmptyState message={getEmptyStateMessage()} />;
    }
    return (
      <table className="w-full">
        <thead>
          <tr className="border-b bg-muted/50">
            <th className="h-12 px-4 text-left align-middle text-sm font-medium text-muted-foreground">
              Name
            </th>
            <th className="h-12 px-4 text-left align-middle text-sm font-medium text-muted-foreground">
              Category
            </th>
            <th className="h-12 px-4 text-left align-middle text-sm font-medium text-muted-foreground">
              Size
            </th>
            <th className="h-12 px-4 text-left align-middle text-sm font-medium text-muted-foreground">
              Type
            </th>
            <th className="h-12 px-4 text-right align-middle text-sm font-medium text-muted-foreground">
              Stock
            </th>
            <th className="h-12 px-4 text-right align-middle text-sm font-medium text-muted-foreground">
              Rate
            </th>
            <th className="h-12 px-4 text-left align-middle text-sm font-medium text-muted-foreground">
              Status
            </th>
            <th className="h-12 px-4 text-center align-middle text-sm font-medium text-muted-foreground">
              Actions
            </th>
          </tr>
        </thead>
        <tbody>
          {items.map((item) => (
            <tr
              key={item._id}
              className="border-b transition-colors hover:bg-muted/50"
            >
              <td className="p-4 align-middle">{item.name}</td>
              <td className="p-4 align-middle">
                {item?.type?.replace(/_/g, " ")}
              </td>
              <td className="p-4 align-middle">{item.size}</td>
              <td className="p-4 align-middle">{item.type}</td>
              <td className="p-4 align-middle text-right">
                {item.currentStock} ({item?.unitType})
              </td>
              <td className="p-4 align-middle text-right">
                ₹{item.purchaseRate.toFixed(2)}
              </td>
              <td className="p-4 align-middle">
                <StatusBadge status={item.status} />
              </td>
              <td className="p-4 align-middle">
                <div className="flex justify-center">
                  <Button
                    variant="ghost"
                    size="icon"
                    onClick={() => {
                      setSelectedItem(item);
                      setOpen(true);
                    }}
                  >
                    <Edit2 className="h-4 w-4 text-muted-foreground" />
                  </Button>
                </div>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    );
  };

  const renderPolishTable = (items: PolishItem[]) => {
    if (!items.length) {
      return <EmptyState message={getEmptyStateMessage()} />;
    }
    return (
      <table className="w-full">
        <thead>
          <tr className="border-b bg-muted/50">
            <th className="h-12 px-4 text-left align-middle text-sm font-medium text-muted-foreground">
              Name
            </th>
            <th className="h-12 px-4 text-left align-middle text-sm font-medium text-muted-foreground">
              Type
            </th>
            <th className="h-12 px-4 text-left align-middle text-sm font-medium text-muted-foreground">
              Specification
            </th>
            <th className="h-12 px-4 text-right align-middle text-sm font-medium text-muted-foreground">
              Stock
            </th>
            <th className="h-12 px-4 text-right align-middle text-sm font-medium text-muted-foreground">
              Rate
            </th>
            <th className="h-12 px-4 text-left align-middle text-sm font-medium text-muted-foreground">
              Status
            </th>
            <th className="h-12 px-4 text-center align-middle text-sm font-medium text-muted-foreground">
              Actions
            </th>
          </tr>
        </thead>
        <tbody>
          {items.map((item) => (
            <tr
              key={item._id}
              className="border-b transition-colors hover:bg-muted/50"
            >
              <td className="p-4 align-middle">{item.name}</td>
              <td className="p-4 align-middle">{item.type}</td>
              <td className="p-4 align-middle">{item.specification}</td>
              <td className="p-4 align-middle text-right">
                {item.currentStock}
              </td>
              <td className="p-4 align-middle text-right">
                ₹{item.purchaseRate.toFixed(2)}
              </td>
              <td className="p-4 align-middle">
                <StatusBadge status={item.status} />
              </td>
              <td className="p-4 align-middle">
                <div className="flex justify-center">
                  <Button
                    variant="ghost"
                    size="icon"
                    onClick={() => {
                      setSelectedItem(item);
                      setOpen(true);
                    }}
                  >
                    <Edit2 className="h-4 w-4 text-muted-foreground" />
                  </Button>
                </div>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    );
  };

  const SubCategoryFilter = () => {
    if (selectedType === "pipes") return null;

    const subcategories =
      selectedType === "fittings"
        ? FITTING_SUBCATEGORIES
        : POLISH_SUBCATEGORIES;
    const placeholder = `Filter ${
      selectedType === "fittings" ? "fitting" : "polish"
    } categories`;

    return (
      <Select
        value={selectedSubCategory}
        onValueChange={setSelectedSubCategory}
      >
        <SelectTrigger className="w-[200px]">
          <SelectValue placeholder={placeholder} />
        </SelectTrigger>
        <SelectContent>
          <SelectItem value="all">All Categories</SelectItem>
          {subcategories.map((category) => (
            <SelectItem key={category} value={category}>
              {category.replace(/_/g, " ")}
            </SelectItem>
          ))}
        </SelectContent>
      </Select>
    );
  };

  const StatusBadge = ({ status }: { status: BaseItem["status"] }) => {
    const styles = {
      in_stock: "bg-green-100 text-green-800",
      low_stock: "bg-yellow-100 text-yellow-800",
      out_of_stock: "bg-red-100 text-red-800",
    };

    const labels = {
      in_stock: "In Stock",
      low_stock: "Low Stock",
      out_of_stock: "Out of Stock",
    };

    return (
      <span
        className={`inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-medium ${styles[status]}`}
      >
        {labels[status]}
      </span>
    );
  };

  const filteredItems = items.filter((item) => {
    // Basic search filter
    const matchesSearch = searchTerm
      ? Object.values(item).some(
          (value) =>
            value &&
            value.toString().toLowerCase().includes(searchTerm.toLowerCase())
        )
      : true;

    // Type matching
    if (selectedType === "polish" && item.itemType === "Polish") {
      // Check if subcategory is selected
      if (!selectedSubCategory || selectedSubCategory === "all") {
        return true;
      }
      // Direct comparison between item type and selected subcategory
      return (item as PolishItem).type === selectedSubCategory;
    }

    // Handle other types (fittings, pipes, etc.)
    const matchesType =
      selectedType === "polish"
        ? item.itemType === "Polish"
        : selectedType === "fittings"
        ? item.itemType === "Fitting"
        : item.itemType === "PipeSheet";

    return matchesSearch && matchesType;
  });

  const handleSubmit = async (data: Partial<InventoryItem>) => {
    try {
      if (selectedItem) {
        await updateItem(selectedItem._id, data);
        toast.success("Item updated successfully");
      } else {
        await createItem(data as Omit<InventoryItem, "_id">);
        toast.success("Item created successfully");
      }
      setOpen(false);
      fetchItems(); // Refresh the list
    } catch (error) {
      toast.error(
        selectedItem ? "Failed to update item" : "Failed to create item"
      );
    }
  };

  useEffect(() => {
    if (selectedType) {
      setSelectedSubCategory("");
    }
  }, [selectedType]);

  return (
    <div className="space-y-8">
      {/* Page Header */}
      <div className="flex justify-between items-center">
        <div>
          <h1 className="text-3xl font-bold tracking-tight">Inventory</h1>
          <p className="text-sm text-muted-foreground mt-1">
            Manage your inventory items and stock levels
          </p>
        </div>
        <Dialog
          open={open}
          onOpenChange={(isOpen) => {
            setOpen(isOpen);
            if (!isOpen) setSelectedItem(null);
          }}
        >
          {/* <DialogTrigger asChild>
            <Button className="bg-primary">
              <Plus className="mr-2 h-4 w-4" /> Add Item
            </Button>
          </DialogTrigger> */}
          <DialogContent className="sm:max-w-[600px]">
            <DialogHeader>
              <DialogTitle>
                {selectedItem ? "Edit Item" : "Add New Item"}
              </DialogTitle>
              <DialogDescription>
                {selectedItem
                  ? "Update item details"
                  : "Enter item details and initial stock level"}
              </DialogDescription>
            </DialogHeader>
            <ItemForm
              initialData={selectedItem}
              onSubmit={handleSubmit}
              onCancel={() => setOpen(false)}
            />
          </DialogContent>
        </Dialog>
      </div>

      {/* Search and Filter Section */}
      <Card>
        <CardContent className="pt-6">
          <div className="flex gap-4">
            <div className="flex-1">
              <Input
                placeholder="Search items..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-full"
              />
            </div>
            {selectedType !== "pipes" && <SubCategoryFilter />}
            {/* <Button variant="outline">
              <Download className="h-4 w-4 mr-2" /> Export
            </Button> */}
          </div>
        </CardContent>
      </Card>

      {/* Tabs Section */}
      <Tabs value={selectedType} onValueChange={setSelectedType}>
        <TabsList>
          <TabsTrigger value="pipes">Pipes and Sheets</TabsTrigger>
          <TabsTrigger value="fittings">Fittings</TabsTrigger>
          <TabsTrigger value="polish">Polish Items</TabsTrigger>
        </TabsList>

        {/* Pipes Tab */}
        <TabsContent value="pipes">
          <Card>
            <CardHeader>
              <CardTitle>Pipe and Sheet Items</CardTitle>
              <CardDescription>
                View and manage pipe and sheet inventory
              </CardDescription>
            </CardHeader>
            <CardContent>
              {loading ? (
                <div className="flex items-center justify-center py-8">
                  Loading...
                </div>
              ) : (
                <div className="rounded-md border">
                  {renderPipeSheetTable(filteredItems as PipeSheetItem[])}
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>

        {/* Sheets Tab */}
        <TabsContent value="sheets">
          <Card>
            <CardHeader>
              <CardTitle>Sheet Items</CardTitle>
              <CardDescription>View and manage sheet inventory</CardDescription>
            </CardHeader>
            <CardContent>
              {loading ? (
                <div className="flex items-center justify-center py-8">
                  Loading...
                </div>
              ) : (
                <div className="rounded-md border">
                  {renderPipeSheetTable(filteredItems as PipeSheetItem[])}
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>

        {/* Fittings Tab */}
        <TabsContent value="fittings">
          <Card>
            <CardHeader>
              <CardTitle>Fitting Items</CardTitle>
              <CardDescription>
                View and manage fitting inventory
              </CardDescription>
            </CardHeader>
            <CardContent>
              {loading ? (
                <div className="flex items-center justify-center py-8">
                  Loading...
                </div>
              ) : (
                <div className="rounded-md border">
                  {renderFittingTable(filteredItems as FittingItem[])}
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>

        {/* Polish Items Tab */}
        <TabsContent value="polish">
          <Card>
            <CardHeader>
              <CardTitle>Polish Items</CardTitle>
              <CardDescription>
                View and manage polish items inventory
              </CardDescription>
            </CardHeader>
            <CardContent>
              {loading ? (
                <div className="flex items-center justify-center py-8">
                  Loading...
                </div>
              ) : (
                <div className="rounded-md border">
                  {renderPolishTable(
                    // Make sure we're only passing Polish items
                    filteredItems.filter((item) => item.itemType === "Polish")
                  )}
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
}




==================================================================
FILE: ./app/(dashboard)/layout.tsx
==================================================================
import ClientLayout from "@/app/(dashboard)/client-layout";
import { GlobalContextProvider } from "@/contexts/globalContext";

export default function DashboardLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <GlobalContextProvider>
      <ClientLayout>{children}</ClientLayout>
    </GlobalContextProvider>
  );
}




==================================================================
FILE: ./app/(dashboard)/profile/page.tsx
==================================================================
"use client";

import { useState } from "react";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Switch } from "@/components/ui/switch";
import { Alert, AlertDescription } from "@/components/ui/alert";
import {
  Mail,
  Phone,
  Building,
  MapPin,
  Shield,
  AlertCircle,
  Camera,
} from "lucide-react";
import { useUser } from "@/contexts/userContext";
import { User } from "@/types/type";

interface UserProfile {
  name: string;
  email: string;
  phone: string;
  role: string;
  company: string;
  address: string;
}

export default function ProfilePage() {
  const [isEditing, setIsEditing] = useState(false);
  const { user } = useUser() as { user: User | undefined };

  const profile: UserProfile = {
    name: "Rajesh Kumar",
    email: "rajesh@company.com",
    phone: "+91 98765 43210",
    role: "Manager",
    company: "Gayatri Industries",
    address: "123, Industrial Area, Phase 1, New Delhi - 110020",
  };

  return (
    <div className="space-y-8">
      {/* Page Header */}
      <div className="flex justify-between items-center">
        <div>
          <h1 className="text-3xl font-bold tracking-tight">Profile</h1>
          <p className="text-sm text-muted-foreground mt-1">
            Manage your account settings and preferences
          </p>
        </div>
      </div>

      <Tabs defaultValue="profile" className="space-y-4">
        <TabsList>
          <TabsTrigger value="profile">Basic Info</TabsTrigger>
          {/* <TabsTrigger value="security">Security</TabsTrigger>
          <TabsTrigger value="preferences">Preferences</TabsTrigger> */}
        </TabsList>

        {/* Basic Info Tab */}
        <TabsContent value="profile">
          <Card>
            <CardHeader>
              <div className="flex justify-between items-start">
                <div>
                  <CardTitle>Personal Information</CardTitle>
                  <CardDescription>
                    Update your personal details and company information
                  </CardDescription>
                </div>
                <Button
                  variant={isEditing ? "outline" : "default"}
                  onClick={() => setIsEditing(!isEditing)}
                >
                  {isEditing ? "Cancel" : "Edit Profile"}
                </Button>
              </div>
            </CardHeader>
            <CardContent>
              {/* Avatar Section */}
              <div className="flex items-center gap-6 mb-8">
                <Avatar className="h-24 w-24">
                  <AvatarImage src="" />
                  <AvatarFallback className="text-2xl bg-primary/10 text-primary">
                    {(user?.firstName?.[0] || "") + (user?.lastName?.[0] || "")}
                  </AvatarFallback>
                </Avatar>
                {isEditing && (
                  <Button variant="outline" size="sm">
                    <Camera className="h-4 w-4 mr-2" />
                    Change Photo
                  </Button>
                )}
              </div>

              {/* Form Fields */}
              <div className="grid gap-6">
                <div className="grid gap-4 grid-cols-1 md:grid-cols-2">
                  <div className="space-y-2">
                    <label className="text-sm font-medium">Full Name</label>
                    <Input
                      defaultValue={user?.firstName}
                      readOnly={!isEditing}
                      className={!isEditing ? "bg-muted" : ""}
                    />
                  </div>
                  <div className="space-y-2">
                    <label className="text-sm font-medium">Email</label>
                    <Input
                      type="email"
                      defaultValue={user?.email}
                      readOnly={!isEditing}
                      className={!isEditing ? "bg-muted" : ""}
                    />
                  </div>

                  <div className="space-y-2">
                    <label className="text-sm font-medium">Role</label>
                    {isEditing ? (
                      <Select defaultValue={profile?.role}>
                        <SelectTrigger>
                          <SelectValue placeholder="Select role" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="admin">Admin</SelectItem>
                          <SelectItem value="manager">Manager</SelectItem>
                          <SelectItem value="staff">Staff</SelectItem>
                        </SelectContent>
                      </Select>
                    ) : (
                      <Input
                        defaultValue={user?.role}
                        readOnly
                        className="bg-muted capitalize"
                      />
                    )}
                  </div>
                  <div className="space-y-2">
                    <label className="text-sm font-medium">Company</label>
                    <Input
                      defaultValue={profile?.company}
                      readOnly={!isEditing}
                      className={!isEditing ? "bg-muted" : ""}
                    />
                  </div>
                </div>

                <div className="space-y-2">
                  <label className="text-sm font-medium">Address</label>
                  <Input
                    defaultValue={profile?.address}
                    readOnly={!isEditing}
                    className={!isEditing ? "bg-muted" : ""}
                  />
                </div>

                {isEditing && (
                  <div className="flex justify-end gap-4 pt-4">
                    <Button
                      onClick={() => setIsEditing(false)}
                      variant="outline"
                    >
                      Cancel
                    </Button>
                    <Button>Save Changes</Button>
                  </div>
                )}
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        {/* Security Tab */}
        <TabsContent value="security">
          <Card>
            <CardHeader>
              <CardTitle>Security Settings</CardTitle>
              <CardDescription>
                Update your password and security preferences
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-6">
                {/* Change Password */}
                <div className="space-y-4">
                  <h3 className="text-lg font-medium">Change Password</h3>
                  <div className="grid gap-4">
                    <div className="space-y-2">
                      <label className="text-sm font-medium">
                        Current Password
                      </label>
                      <Input type="password" />
                    </div>
                    <div className="space-y-2">
                      <label className="text-sm font-medium">
                        New Password
                      </label>
                      <Input type="password" />
                    </div>
                    <div className="space-y-2">
                      <label className="text-sm font-medium">
                        Confirm Password
                      </label>
                      <Input type="password" />
                    </div>
                    <Button className="w-full md:w-auto">
                      Update Password
                    </Button>
                  </div>
                </div>

                <div className="space-y-4">
                  <h3 className="text-lg font-medium">Login Security</h3>
                  <div className="flex items-center justify-between">
                    <div className="space-y-0.5">
                      <label className="text-sm font-medium">
                        Two-Factor Authentication
                      </label>
                      <p className="text-sm text-muted-foreground">
                        Add an extra layer of security to your account
                      </p>
                    </div>
                    <Switch />
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        {/* Preferences Tab */}
        <TabsContent value="preferences">
          <Card>
            <CardHeader>
              <CardTitle>User Preferences</CardTitle>
              <CardDescription>
                Customize your application settings
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-6">
                {/* Display Settings */}
                <div className="space-y-4">
                  <div className="grid gap-4">
                    <div className="space-y-2">
                      <label className="text-sm font-medium">Date Format</label>
                      <Select defaultValue="dd-mm-yyyy">
                        <SelectTrigger>
                          <SelectValue placeholder="Select date format" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="dd-mm-yyyy">DD-MM-YYYY</SelectItem>
                          <SelectItem value="mm-dd-yyyy">MM-DD-YYYY</SelectItem>
                          <SelectItem value="yyyy-mm-dd">YYYY-MM-DD</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                    <div className="space-y-2">
                      <label className="text-sm font-medium">
                        Currency Display
                      </label>
                      <Select defaultValue="inr">
                        <SelectTrigger>
                          <SelectValue placeholder="Select currency" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="inr">Indian Rupee (₹)</SelectItem>
                          <SelectItem value="usd">US Dollar ($)</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                  </div>
                </div>

                {/* Notification Settings */}
                <div className="space-y-4">
                  <h3 className="text-lg font-medium">Notifications</h3>
                  <div className="space-y-4">
                    <div className="flex items-center justify-between">
                      <div className="space-y-0.5">
                        <label className="text-sm font-medium">
                          Email Notifications
                        </label>
                        <p className="text-sm text-muted-foreground">
                          Receive important updates via email
                        </p>
                      </div>
                      <Switch defaultChecked />
                    </div>
                    <div className="flex items-center justify-between">
                      <div className="space-y-0.5">
                        <label className="text-sm font-medium">
                          Stock Alerts
                        </label>
                        <p className="text-sm text-muted-foreground">
                          Get notified when stock is low
                        </p>
                      </div>
                      <Switch defaultChecked />
                    </div>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
}




==================================================================
FILE: ./app/(dashboard)/purchase/page.tsx
==================================================================
"use client";

import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Dialog, DialogTrigger } from "@/components/ui/dialog";
import { Download, Plus } from "lucide-react";
import { getVendors } from "@/api/vendor";
import { getPurchases } from "@/api/purchase";
import toast from "react-hot-toast";
import PurchaseModal from "@/components/Forms/PurchaseForm";
import { format } from "date-fns";
import PaymentModal from "@/components/Forms/PaymentModal";

interface Vendor {
  id: string;
  name: string;
  gstin: string;
  _id: string;
}

interface Purchase {
  _id: string;
  purchaseNumber: string;
  date: string;
  invoiceNo: string;
  vendor: {
    _id: string;
    name: string;
    gstin: string;
  };
  totalAmount: number;
  discount: number;
  gstAmount: number;
  grandTotal: number;
  balanceAmount: number;
  status: "pending" | "received";
  paymentStatus: "unpaid" | "partial" | "paid";
}

interface PaginationInfo {
  currentPage: number;
  totalPages: number;
  totalItems: number;
}

export default function PurchasePage() {
  const [purchaseOpen, setPurchaseOpen] = useState(false);
  const [vendors, setVendors] = useState<Vendor[]>([]);
  const [purchases, setPurchases] = useState<Purchase[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [pagination, setPagination] = useState<PaginationInfo>({
    currentPage: 1,
    totalPages: 1,
    totalItems: 0,
  });

  const [selectedPurchase, setSelectedPurchase] = useState<Purchase | null>(
    null
  );
  const [paymentModalOpen, setPaymentModalOpen] = useState(false);

  const fetchVendors = async () => {
    try {
      const response = await getVendors();

      if (response?.data?.statusCode === 200) {
        const transformedVendors = response.data.data.map((vendor: any) => ({
          _id: vendor._id,
          id: vendor.id,
          name: vendor.name,
          gstin: vendor.gstin,
        }));

        setVendors(transformedVendors);
      }
    } catch (error) {
      toast.error("Failed to fetch vendors");
      console.error("Error fetching vendors:", error);
    }
  };

  const fetchPurchases = async (page = 1) => {
    try {
      setIsLoading(true);
      const response = await getPurchases({ page, limit: 10 });

      if (response?.data?.statusCode === 200) {
        setPurchases(response.data.data.purchases);
        setPagination(response.data.data.pagination);
      }
    } catch (error) {
      toast.error("Failed to fetch purchases");
      console.error("Error fetching purchases:", error);
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    fetchVendors();
    fetchPurchases();
  }, []);

  // Status badge component
  const StatusBadge = ({ status }: { status: Purchase["status"] }) => {
    const styles = {
      pending: "bg-yellow-100 text-yellow-800",
      received: "bg-green-100 text-green-800",
    };

    return (
      <span
        className={`inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-medium ${styles[status]}`}
      >
        {status.charAt(0).toUpperCase() + status.slice(1)}
      </span>
    );
  };

  // Payment badge component
  const PaymentBadge = ({ status }: { status: Purchase["paymentStatus"] }) => {
    const styles = {
      unpaid: "bg-red-100 text-red-800",
      partial: "bg-yellow-100 text-yellow-800",
      paid: "bg-green-100 text-green-800",
    };

    return (
      <span
        className={`inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-medium ${styles[status]}`}
      >
        {status.charAt(0).toUpperCase() + status.slice(1)}
      </span>
    );
  };

  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat("en-IN", {
      style: "currency",
      currency: "INR",
      maximumFractionDigits: 2,
      minimumFractionDigits: 2,
    }).format(amount);
  };

  return (
    <div className="space-y-8">
      {/* Page Header */}
      <div className="flex justify-between items-center">
        <div>
          <h1 className="text-3xl font-bold tracking-tight">Purchases</h1>
          <p className="text-sm text-muted-foreground mt-1">
            Manage your purchase orders and transactions
          </p>
        </div>
        <Dialog open={purchaseOpen} onOpenChange={setPurchaseOpen}>
          <DialogTrigger asChild>
            <Button className="bg-primary">
              <Plus className="mr-2 h-4 w-4" /> Add Purchase
            </Button>
          </DialogTrigger>
          <PurchaseModal
            open={purchaseOpen}
            onOpenChange={setPurchaseOpen}
            vendors={vendors}
            isLoading={isLoading}
            onSuccess={() => fetchPurchases(pagination.currentPage)}
            fetchVendors={fetchVendors}
          />
        </Dialog>
        {selectedPurchase && (
          <Dialog open={paymentModalOpen} onOpenChange={setPaymentModalOpen}>
            <PaymentModal
              open={paymentModalOpen}
              onOpenChange={setPaymentModalOpen}
              purchase={selectedPurchase}
              onSuccess={() => {
                fetchPurchases(pagination.currentPage);
                setSelectedPurchase(null);
              }}
            />
          </Dialog>
        )}
      </div>

      {/* Purchase Orders Section */}
      <Card>
        <CardHeader className="pb-3">
          <div className="flex justify-between items-start">
            <div>
              <CardTitle className="text-xl font-semibold">
                Purchase Orders
              </CardTitle>
              <p className="text-sm text-muted-foreground mt-1">
                View and manage your purchase orders
              </p>
            </div>
            <Button variant="outline" size="sm">
              <Download className="h-4 w-4 mr-2" /> Export
            </Button>
          </div>
        </CardHeader>
        <CardContent>
          <div className="rounded-md border">
            <table className="w-full">
              <thead>
                <tr className="border-b bg-muted/50">
                  <th className="h-12 px-4 text-left align-middle text-sm font-medium text-muted-foreground">
                    Date
                  </th>
                  <th className="h-12 px-4 text-left align-middle text-sm font-medium text-muted-foreground">
                    PO Number
                  </th>
                  <th className="h-12 px-4 text-left align-middle text-sm font-medium text-muted-foreground">
                    Invoice No
                  </th>
                  <th className="h-12 px-4 text-left align-middle text-sm font-medium text-muted-foreground">
                    Vendor
                  </th>
                  <th className="h-12 px-4 text-right align-middle text-sm font-medium text-muted-foreground">
                    Amount
                  </th>
                  <th className="h-12 px-4 text-right align-middle text-sm font-medium text-muted-foreground">
                    Balance
                  </th>
                  <th className="h-12 px-4 text-left align-middle text-sm font-medium text-muted-foreground">
                    Status
                  </th>
                  <th className="h-12 px-4 text-left align-middle text-sm font-medium text-muted-foreground">
                    Payment
                  </th>
                  <th className="h-12 px-4 text-left align-middle text-sm font-medium text-muted-foreground">
                    Actions
                  </th>
                </tr>
              </thead>
              <tbody>
                {isLoading ? (
                  <tr>
                    <td colSpan={8} className="p-4 text-center">
                      Loading...
                    </td>
                  </tr>
                ) : purchases.length === 0 ? (
                  <tr>
                    <td colSpan={8} className="p-4 text-center">
                      No purchases found
                    </td>
                  </tr>
                ) : (
                  purchases.map((purchase) => (
                    <tr
                      key={purchase._id}
                      className="border-b transition-colors hover:bg-muted/50"
                    >
                      <td className="p-4 align-middle">
                        {format(new Date(purchase.date), "dd/MM/yyyy")}
                      </td>
                      <td className="p-4 align-middle font-medium">
                        {purchase.purchaseNumber}
                      </td>
                      <td className="p-4 align-middle">{purchase.invoiceNo}</td>
                      <td className="p-4 align-middle">
                        {purchase.vendor.name}
                      </td>
                      <td className="p-4 align-middle text-right">
                        {formatCurrency(purchase.grandTotal)}
                      </td>
                      <td className="p-4 align-middle text-right">
                        {formatCurrency(purchase.balanceAmount)}
                      </td>
                      <td className="p-4 align-middle">
                        <StatusBadge status={purchase.status} />
                      </td>
                      <td className="p-4 align-middle">
                        <PaymentBadge status={purchase.paymentStatus} />
                      </td>
                      <td className="p-4 align-middle">
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => {
                            setSelectedPurchase(purchase);
                            setPaymentModalOpen(true);
                          }}
                          disabled={purchase.paymentStatus === "paid"}
                        >
                          Add Payment
                        </Button>
                      </td>
                    </tr>
                  ))
                )}
              </tbody>
            </table>
          </div>

          {/* Pagination */}
          {pagination.totalPages > 1 && (
            <div className="flex justify-between items-center mt-4">
              <p className="text-sm text-muted-foreground">
                Showing page {pagination.currentPage} of {pagination.totalPages}
              </p>
              <div className="space-x-2">
                <Button
                  variant="outline"
                  size="sm"
                  disabled={pagination.currentPage === 1}
                  onClick={() => fetchPurchases(pagination.currentPage - 1)}
                >
                  Previous
                </Button>
                <Button
                  variant="outline"
                  size="sm"
                  disabled={pagination.currentPage === pagination.totalPages}
                  onClick={() => fetchPurchases(pagination.currentPage + 1)}
                >
                  Next
                </Button>
              </div>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
}




==================================================================
FILE: ./app/(dashboard)/sales/page.tsx
==================================================================
"use client";

import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Plus,
  Trash2,
  IndianRupee,
  Download,
  FileText,
  AlertCircle,
} from "lucide-react";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Alert, AlertDescription } from "@/components/ui/alert";

// TypeScript interfaces
interface Product {
  id: string;
  code: string;
  name: string;
  category: string;
  rate: number;
  unit: string;
}

interface Customer {
  id: number;
  name: string;
  gstin?: string;
  creditLimit: number;
  currentBalance: number;
  paymentTerms?: string;
}

interface SaleItem {
  id: number;
  productId: string;
  quantity: number;
  weight: number;
  rate: number;
  amount: number;
}

interface Sale {
  id: string;
  date: string;
  customerId: number;
  customerName: string;
  items: SaleItem[];
  subtotal: number;
  gst: number;
  total: number;
  status: "draft" | "processing" | "completed" | "cancelled";
  paymentStatus: "pending" | "partial" | "paid";
}

export default function SalesPage() {
  const [open, setOpen] = useState(false);
  const [items, setItems] = useState<SaleItem[]>([]);
  const [selectedCustomer, setSelectedCustomer] = useState<string>("");

  // Sample products data
  const sampleProducts: Product[] = [
    {
      id: "1",
      code: "PIP-304-80x80-G14",
      name: "Pipe 304 80x80 14G",
      category: "PIPE",
      rate: 244.36,
      unit: "pcs",
    },
    {
      id: "2",
      code: "PIP-304-50x50-G16",
      name: "Pipe 304 50x50 16G",
      category: "PIPE",
      rate: 170.36,
      unit: "pcs",
    },
  ];

  // Sample customers data
  const sampleCustomers: Customer[] = [
    {
      id: 1,
      name: "Customer 1",
      gstin: "09AAACH7409R1ZZ",
      creditLimit: 50000,
      currentBalance: 15000,
      paymentTerms: "30 days",
    },
    {
      id: 2,
      name: "Customer 2",
      gstin: "07BBBCH8809R1ZZ",
      creditLimit: 100000,
      currentBalance: 45000,
      paymentTerms: "15 days",
    },
  ];

  // Sample sales data
  const sales: Sale[] = [
    {
      id: "SO-2024-001",
      date: "2024-03-20",
      customerId: 1,
      customerName: "Customer 1",
      items: [
        {
          id: 1,
          productId: "1",
          quantity: 20,
          weight: 452.0,
          rate: 244.36,
          amount: 4887.2,
        },
      ],
      subtotal: 4887.2,
      gst: 879.7,
      total: 5766.9,
      status: "completed",
      paymentStatus: "paid",
    },
    {
      id: "SO-2024-002",
      date: "2024-03-19",
      customerId: 2,
      customerName: "Customer 2",
      items: [
        {
          id: 1,
          productId: "2",
          quantity: 50,
          weight: 1250.0,
          rate: 170.36,
          amount: 8518.0,
        },
      ],
      subtotal: 8518.0,
      gst: 1533.24,
      total: 10051.24,
      status: "processing",
      paymentStatus: "pending",
    },
  ];

  const addItem = () => {
    setItems([
      ...items,
      {
        id: Date.now(),
        productId: "",
        quantity: 0,
        weight: 0,
        rate: 0,
        amount: 0,
      },
    ]);
  };

  const removeItem = (index: number) => {
    setItems(items.filter((_, i) => i !== index));
  };

  const updateItem = (index: number, field: keyof SaleItem, value: any) => {
    const newItems = [...items];
    newItems[index] = {
      ...newItems[index],
      [field]: value,
    };

    // Recalculate amount if quantity or rate changes
    if (field === "quantity" || field === "rate") {
      newItems[index].amount = newItems[index].quantity * newItems[index].rate;
    }

    setItems(newItems);
  };

  const calculateTotals = () => {
    const subtotal = items.reduce((sum, item) => sum + (item.amount || 0), 0);
    const gst = subtotal * 0.18;
    return {
      subtotal,
      gst,
      total: subtotal + gst,
    };
  };

  // Status badge component
  const StatusBadge = ({ status }: { status: Sale["status"] }) => {
    const styles = {
      draft: "bg-gray-100 text-gray-800",
      processing: "bg-blue-100 text-blue-800",
      completed: "bg-green-100 text-green-800",
      cancelled: "bg-red-100 text-red-800",
    };

    return (
      <span
        className={`inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-medium ${styles[status]}`}
      >
        {status.charAt(0).toUpperCase() + status.slice(1)}
      </span>
    );
  };

  // Payment status badge component
  const PaymentBadge = ({ status }: { status: Sale["paymentStatus"] }) => {
    const styles = {
      pending: "bg-yellow-100 text-yellow-800",
      partial: "bg-blue-100 text-blue-800",
      paid: "bg-green-100 text-green-800",
    };

    return (
      <span
        className={`inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-medium ${styles[status]}`}
      >
        {status.charAt(0).toUpperCase() + status.slice(1)}
      </span>
    );
  };

  return (
    <div className="space-y-8">
      {/* Page Header */}
      <div className="flex justify-between items-center">
        <div>
          <h1 className="text-3xl font-bold tracking-tight">Sales Orders</h1>
          <p className="text-sm text-muted-foreground mt-1">
            Create and manage your sales orders
          </p>
        </div>
        <Dialog open={open} onOpenChange={setOpen}>
          <DialogTrigger asChild>
            <Button className="bg-primary">
              <Plus className="mr-2 h-4 w-4" /> Create Sale
            </Button>
          </DialogTrigger>
          <DialogContent className="sm:max-w-[900px] max-h-[90vh] overflow-y-auto">
            <DialogHeader>
              <DialogTitle>Create New Sale</DialogTitle>
              <DialogDescription>
                Add items and enter sale details
              </DialogDescription>
            </DialogHeader>

            <div className="grid gap-6 py-4">
              {/* Customer and Basic Details */}
              <div className="grid grid-cols-2 gap-4">
                <div className="flex gap-2">
                  <div className="flex-1">
                    <label className="text-sm font-medium mb-1 block">
                      Customer*
                    </label>
                    <Select onValueChange={setSelectedCustomer}>
                      <SelectTrigger>
                        <SelectValue placeholder="Select customer" />
                      </SelectTrigger>
                      <SelectContent>
                        {sampleCustomers.map((customer) => (
                          <SelectItem
                            key={customer.id}
                            value={customer.id.toString()}
                          >
                            {customer.name}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                    {selectedCustomer && (
                      <p className="text-xs text-muted-foreground mt-1">
                        Credit Limit: ₹
                        {sampleCustomers
                          .find((c) => c.id.toString() === selectedCustomer)
                          ?.creditLimit.toLocaleString()}
                      </p>
                    )}
                  </div>
                  <Button className="mt-6" variant="outline" size="icon">
                    <Plus className="h-4 w-4" />
                  </Button>
                </div>

                <div>
                  <label className="text-sm font-medium mb-1 block">
                    Date*
                  </label>
                  <Input
                    type="date"
                    defaultValue={new Date().toISOString().split("T")[0]}
                  />
                </div>
              </div>

              {/* Items Table */}
              <Card>
                <CardHeader>
                  <div className="flex justify-between items-center">
                    <CardTitle>Items</CardTitle>
                    <Button onClick={addItem} variant="outline" size="sm">
                      <Plus className="h-4 w-4 mr-1" /> Add Item
                    </Button>
                  </div>
                </CardHeader>
                <CardContent>
                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead>Product</TableHead>
                        <TableHead>Quantity</TableHead>
                        <TableHead>Weight</TableHead>
                        <TableHead>Rate</TableHead>
                        <TableHead>Amount</TableHead>
                        <TableHead></TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {items.map((item, index) => (
                        <TableRow key={item.id}>
                          <TableCell>
                            <Select
                              onValueChange={(value) => {
                                const product = sampleProducts.find(
                                  (p) => p.id === value
                                );
                                if (product) {
                                  updateItem(index, "productId", value);
                                  updateItem(index, "rate", product.rate);
                                }
                              }}
                            >
                              <SelectTrigger>
                                <SelectValue placeholder="Select product" />
                              </SelectTrigger>
                              <SelectContent>
                                {sampleProducts.map((product) => (
                                  <SelectItem
                                    key={product.id}
                                    value={product.id}
                                  >
                                    {product.name}
                                  </SelectItem>
                                ))}
                              </SelectContent>
                            </Select>
                          </TableCell>
                          <TableCell>
                            <Input
                              type="number"
                              placeholder="Qty"
                              className="w-20"
                              value={item.quantity || ""}
                              onChange={(e) =>
                                updateItem(
                                  index,
                                  "quantity",
                                  Number(e.target.value)
                                )
                              }
                            />
                          </TableCell>
                          <TableCell>
                            <Input
                              type="number"
                              placeholder="Weight"
                              className="w-24"
                              value={item.weight || ""}
                              onChange={(e) =>
                                updateItem(
                                  index,
                                  "weight",
                                  Number(e.target.value)
                                )
                              }
                            />
                          </TableCell>
                          <TableCell>
                            <Input
                              type="number"
                              placeholder="Rate"
                              className="w-24"
                              value={item.rate || ""}
                              onChange={(e) =>
                                updateItem(
                                  index,
                                  "rate",
                                  Number(e.target.value)
                                )
                              }
                            />
                          </TableCell>
                          <TableCell>
                            <Input
                              type="number"
                              readOnly
                              className="w-24"
                              value={item.amount || ""}
                            />
                          </TableCell>
                          <TableCell>
                            <Button
                              variant="ghost"
                              size="icon"
                              onClick={() => removeItem(index)}
                            >
                              <Trash2 className="h-4 w-4 text-red-500" />
                            </Button>
                          </TableCell>
                        </TableRow>
                      ))}
                      {items.length === 0 && (
                        <TableRow>
                          <TableCell
                            colSpan={6}
                            className="text-center text-muted-foreground py-6"
                          >
                            No items added. Click "Add Item" to start adding
                            products.
                          </TableCell>
                        </TableRow>
                      )}
                    </TableBody>
                  </Table>
                </CardContent>
              </Card>

              {/* Summary Section */}
              <div className="bg-gray-50 p-4 rounded-lg space-y-2">
                <div className="flex justify-between">
                  <span className="text-sm">Subtotal</span>
                  <span className="flex items-center">
                    <IndianRupee className="h-3 w-3 mr-1" />
                    {calculateTotals().subtotal.toFixed(2)}
                  </span>
                </div>
                <div className="flex justify-between">
                  <span className="text-sm">GST (18%)</span>
                  <span className="flex items-center">
                    <IndianRupee className="h-3 w-3 mr-1" />
                    {calculateTotals().gst.toFixed(2)}
                  </span>
                </div>
                <div className="flex justify-between font-medium pt-2 border-t">
                  <span>Total</span>
                  <span className="flex items-center">
                    <IndianRupee className="h-3 w-3 mr-1" />
                    {calculateTotals().total.toFixed(2)}
                  </span>
                </div>
              </div>

              {/* Payment Details */}
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="text-sm font-medium mb-1 block">
                    Payment Terms
                  </label>
                  <Select>
                    <SelectTrigger>
                      <SelectValue placeholder="Select terms" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="immediate">Immediate</SelectItem>
                      <SelectItem value="15days">15 Days</SelectItem>
                      <SelectItem value="30days">30 Days</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div>
                  <label className="text-sm font-medium mb-1 block">
                    Notes
                  </label>
                  <Input placeholder="Add notes or special instructions" />
                </div>
              </div>

              {selectedCustomer && (
                <Alert>
                  <AlertCircle className="h-4 w-4" />
                  <AlertDescription>
                    Current Balance: ₹
                    {sampleCustomers
                      .find((c) => c.id.toString() === selectedCustomer)
                      ?.currentBalance.toLocaleString()}
                    <br />
                    Available Credit: ₹
                    {(
                      sampleCustomers.find(
                        (c) => c.id.toString() === selectedCustomer
                      )?.creditLimit ||
                      0 -
                        (sampleCustomers.find(
                          (c) => c.id.toString() === selectedCustomer
                        )?.currentBalance || 0)
                    ).toLocaleString()}
                  </AlertDescription>
                </Alert>
              )}
            </div>

            {/* Action Buttons */}
            <div className="flex justify-end gap-2 mt-4">
              <Button variant="outline" onClick={() => setOpen(false)}>
                Cancel
              </Button>
              <Button>Create Sale</Button>
            </div>
          </DialogContent>
        </Dialog>
      </div>

      {/* Sales List Section */}
      <Card>
        <CardHeader className="pb-3">
          <div className="flex justify-between items-start">
            <div>
              <CardTitle className="text-xl font-semibold">
                Sales Orders
              </CardTitle>
              <p className="text-sm text-muted-foreground mt-1">
                View and manage your sales orders
              </p>
            </div>
            <Button variant="outline" size="sm">
              <Download className="h-4 w-4 mr-2" /> Export
            </Button>
          </div>
        </CardHeader>
        <CardContent>
          <div className="rounded-md border">
            <table className="w-full">
              <thead>
                <tr className="border-b bg-muted/50">
                  <th className="h-12 px-4 text-left align-middle text-sm font-medium text-muted-foreground">
                    Date
                  </th>
                  <th className="h-12 px-4 text-left align-middle text-sm font-medium text-muted-foreground">
                    Order No
                  </th>
                  <th className="h-12 px-4 text-left align-middle text-sm font-medium text-muted-foreground">
                    Customer
                  </th>
                  <th className="h-12 px-4 text-right align-middle text-sm font-medium text-muted-foreground">
                    Items
                  </th>
                  <th className="h-12 px-4 text-right align-middle text-sm font-medium text-muted-foreground">
                    Total
                  </th>
                  <th className="h-12 px-4 text-left align-middle text-sm font-medium text-muted-foreground">
                    Status
                  </th>
                  <th className="h-12 px-4 text-left align-middle text-sm font-medium text-muted-foreground">
                    Payment
                  </th>
                  <th className="h-12 px-4 text-center align-middle text-sm font-medium text-muted-foreground">
                    Actions
                  </th>
                </tr>
              </thead>
              <tbody>
                {sales.map((sale) => (
                  <tr
                    key={sale.id}
                    className="border-b transition-colors hover:bg-muted/50"
                  >
                    <td className="p-4 align-middle">{sale.date}</td>
                    <td className="p-4 align-middle font-medium">{sale.id}</td>
                    <td className="p-4 align-middle">{sale.customerName}</td>
                    <td className="p-4 align-middle text-right">
                      {sale.items.length}
                    </td>
                    <td className="p-4 align-middle text-right">
                      ₹
                      {sale.total.toLocaleString("en-IN", {
                        minimumFractionDigits: 2,
                        maximumFractionDigits: 2,
                      })}
                    </td>
                    <td className="p-4 align-middle">
                      <StatusBadge status={sale.status} />
                    </td>
                    <td className="p-4 align-middle">
                      <PaymentBadge status={sale.paymentStatus} />
                    </td>
                    <td className="p-4 align-middle">
                      <div className="flex justify-center gap-2">
                        <Button variant="ghost" size="icon">
                          <FileText className="h-4 w-4 text-muted-foreground" />
                        </Button>
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}




==================================================================
FILE: ./app/(dashboard)/vendors/page.tsx
==================================================================
"use client";

import { useEffect, useState } from "react";
import toast from "react-hot-toast";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Download, Plus, ScrollText } from "lucide-react";
import { getVendors } from "@/api/vendor";
import VendorForm from "@/components/Forms/VendorForm";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { getVendorLedger } from "@/api/transaction";
import { LedgerModal, TransactionData } from "@/components/Forms/LedgerModal";
interface Vendor {
  _id: string;
  id: string;
  name: string;
  gstin: string;
  contactPerson: string;
  phone: string;
  email: string;
  address: string;
  creditLimit: number;
  currentBalance: number;
  status: "active" | "inactive";
  paymentTerms: string;
}

export default function VendorsPage() {
  const [vendors, setVendors] = useState<Vendor[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [open, setOpen] = useState(false);

  const [showLedger, setShowLedger] = useState(false);
  const [transactions, setTransactions] = useState<TransactionData[]>([]);
  const [selectedVendor, setSelectedVendor] = useState<string | null>(null);

  const fetchVendors = async () => {
    try {
      const response = await getVendors();

      if (response?.data?.statusCode === 200) {
        // Transform the data to match our interface
        const transformedVendors = response.data.data.map((vendor: any) => ({
          _id: vendor._id,
          id: vendor.id,
          name: vendor.name,
          gstin: vendor.gstin,
          contactPerson: vendor.contactPerson,
          phone: vendor.phone,
          email: vendor.email,
          address: vendor.address,
          creditLimit: vendor.creditLimit,
          currentBalance: vendor.currentBalance,
          status: vendor.status,
        }));

        setVendors(transformedVendors);
      }
    } catch (error) {
      toast.error("Failed to fetch vendors");
      console.error("Error fetching vendors:", error);
    } finally {
      setIsLoading(false);
    }
  };

  const handleViewLedger = async (vendorId: string) => {
    try {
      setSelectedVendor(vendorId);
      const response = await getVendorLedger(vendorId);
      if (response?.data.success) {
        setTransactions(response.data.data);
        setShowLedger(true);
      }
    } catch (error) {
      toast.error("Failed to fetch ledger");
    }
  };

  const handleDateSelect = async (date: Date) => {
    if (selectedVendor) {
      try {
        const response = await getVendorLedger(selectedVendor, {
          startDate: date.toISOString(),
          endDate: date.toISOString(),
        });
        if (response?.data.success) {
          setTransactions(response.data.data);
        }
      } catch (error) {
        toast.error("Failed to fetch transactions for selected date");
      }
    }
  };

  useEffect(() => {
    fetchVendors();
  }, []);

  const StatusBadge = ({ status }: { status: Vendor["status"] }) => {
    const styles = {
      active: "bg-green-100 text-green-800",
      inactive: "bg-gray-100 text-gray-800",
    };

    return (
      <span
        className={`inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-medium ${styles[status]}`}
      >
        {status.charAt(0).toUpperCase() + status.slice(1)}
      </span>
    );
  };

  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat("en-IN", {
      style: "currency",
      currency: "INR",
    }).format(amount);
  };

  return (
    <div className="space-y-8">
      <div className="flex justify-between items-center">
        <div>
          <h1 className="text-3xl font-bold tracking-tight">Vendors</h1>
          <p className="text-sm text-muted-foreground mt-1">
            Manage your vendors and supplier relationships
          </p>
        </div>
        <Dialog open={open} onOpenChange={setOpen}>
          <DialogTrigger asChild>
            <Button className="bg-primary">
              <Plus className="mr-2 h-4 w-4" /> Add Vendor
            </Button>
          </DialogTrigger>
          <DialogContent className="sm:max-w-[600px]">
            <DialogHeader>
              <DialogTitle>Add New Vendor</DialogTitle>
              <DialogDescription>
                Enter vendor details and business information
              </DialogDescription>
            </DialogHeader>
            <VendorForm
              onSuccess={() => {
                setOpen(false);
                fetchVendors();
              }}
              onCancel={() => setOpen(false)}
            />
          </DialogContent>
        </Dialog>
      </div>

      {/* Vendors List Section */}
      <Card>
        <CardHeader className="pb-3">
          <div className="flex justify-between items-start">
            <div>
              <CardTitle className="text-xl font-semibold">
                Vendor List
              </CardTitle>
              <p className="text-sm text-muted-foreground mt-1">
                View and manage your vendor information
              </p>
            </div>
            <Button variant="outline" size="sm">
              <Download className="h-4 w-4 mr-2" /> Export
            </Button>
          </div>
        </CardHeader>
        <CardContent>
          {isLoading ? (
            <div className="flex items-center justify-center py-8">
              <p>Loading vendors...</p>
            </div>
          ) : vendors.length === 0 ? (
            <div className="flex items-center justify-center py-8">
              <p className="text-muted-foreground">No vendors found</p>
            </div>
          ) : (
            <div className="rounded-md border">
              <table className="w-full">
                <thead>
                  <tr className="border-b bg-muted/50">
                    <th className="h-12 px-4 text-left align-middle text-sm font-medium text-muted-foreground">
                      ID
                    </th>
                    <th className="h-12 px-4 text-left align-middle text-sm font-medium text-muted-foreground">
                      Business Name
                    </th>
                    <th className="h-12 px-4 text-left align-middle text-sm font-medium text-muted-foreground">
                      Contact Person
                    </th>
                    <th className="h-12 px-4 text-left align-middle text-sm font-medium text-muted-foreground">
                      Phone
                    </th>
                    <th className="h-12 px-4 text-left align-middle text-sm font-medium text-muted-foreground">
                      GSTIN
                    </th>
                    <th className="h-12 px-4 text-right align-middle text-sm font-medium text-muted-foreground">
                      Credit Limit
                    </th>
                    <th className="h-12 px-4 text-right align-middle text-sm font-medium text-muted-foreground">
                      Balance
                    </th>
                    <th className="h-12 px-4 text-left align-middle text-sm font-medium text-muted-foreground">
                      Status
                    </th>
                    <th className="h-12 px-4 text-left align-middle text-sm font-medium text-muted-foreground">
                      Ledger
                    </th>
                  </tr>
                </thead>
                <tbody>
                  {vendors.map((vendor) => (
                    <tr
                      key={vendor.id}
                      className="border-b transition-colors hover:bg-muted/50"
                    >
                      <td className="p-4 align-middle font-medium">
                        {vendor.id}
                      </td>
                      <td className="p-4 align-middle">{vendor.name}</td>
                      <td className="p-4 align-middle">
                        {vendor.contactPerson}
                      </td>
                      <td className="p-4 align-middle">{vendor.phone}</td>
                      <td className="p-4 align-middle">{vendor.gstin}</td>
                      <td className="p-4 align-middle text-right">
                        ₹{vendor.creditLimit.toLocaleString()}
                      </td>
                      <td className="p-4 align-middle text-right">
                        {formatCurrency(vendor?.currentBalance)}
                      </td>
                      <td className="p-4 align-middle">
                        <StatusBadge status={vendor.status} />
                      </td>
                      <td className="p-4 align-middle">
                        <Button
                          variant="ghost"
                          size="sm"
                          className="h-8 w-8 p-0"
                          onClick={() => handleViewLedger(vendor?._id)}
                        >
                          <ScrollText className="h-4 w-4" />
                        </Button>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          )}
        </CardContent>
      </Card>
      {showLedger && (
        <LedgerModal
          transactions={transactions}
          open={showLedger}
          onClose={() => setShowLedger(false)}
          onDateSelect={handleDateSelect}
        />
      )}
    </div>
  );
}




==================================================================
FILE: ./app/client-layout.tsx
==================================================================
"use client";

import { Toaster } from "react-hot-toast";

export default function ClientLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <>
      {children}
      <Toaster />
    </>
  );
}




==================================================================
FILE: ./app/layout.tsx
==================================================================
import { metadata } from "@/app/meta-data";
import "./globals.css";
import { Inter } from "next/font/google";
import ClientLayout from "@/app/client-layout";
import { GlobalContextProvider } from "@/contexts/globalContext";

const inter = Inter({ subsets: ["latin"] });

export { metadata };

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en" suppressHydrationWarning>
      <body className={inter.className}>
        <GlobalContextProvider>
          <ClientLayout>{children}</ClientLayout>
        </GlobalContextProvider>
      </body>
    </html>
  );
}




==================================================================
FILE: ./app/meta-data.ts
==================================================================
// app/metadata.ts
export const metadata = {
  title: "Gayatri Industries - Inventory Management System",
  description: "Modern inventory management system for Gayatri Industries",
} as const;




==================================================================
FILE: ./components/Forms/ItemForm.tsx
==================================================================
"use client";

import React, { useState } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { InventoryItem, ItemType } from "@/api/items";
import { toast } from "react-hot-toast";

interface ItemFormProps {
  initialData?: InventoryItem | null;
  onSubmit: (data: Partial<InventoryItem>) => Promise<void>;
  onCancel: () => void;
}

export default function ItemForm({
  initialData,
  onSubmit,
  onCancel,
}: ItemFormProps) {
  const [itemType, setItemType] = useState<ItemType>(
    initialData?.itemType || "PipeSheet"
  );

  const [formData, setFormData] = useState({
    itemType,
    name: initialData?.name || "",
    code: initialData?.code || "",
    currentStock: initialData?.currentStock || 0,
    minimumStock: initialData?.minimumStock || 0,
    purchaseRate: initialData?.purchaseRate || 0,
    sellingRate: initialData?.sellingRate || 0,
    margin: initialData?.margin || 0,
    gst: initialData?.gst || 0,
    unitType: initialData?.unitType || "pieces",
    // Type specific fields
    type: initialData?.type || "",
    grade: (initialData as any)?.grade || "304",
    size: initialData?.size || "",
    gauge: (initialData as any)?.gauge || "",
    weight: (initialData as any)?.weight || 0,
    subCategory: (initialData as any)?.subCategory || "",
    specification: (initialData as any)?.specification || "",
    variant: (initialData as any)?.variant || null,
  });

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      const submitData = {
        ...formData,
        itemType, // Ensure itemType is included
      };
      await onSubmit(submitData);
    } catch (error) {
      toast.error("Failed to save item");
    }
  };

  const renderTypeSpecificFields = () => {
    switch (itemType) {
      case "PipeSheet":
        return (
          <>
            <div className="space-y-2">
              <label className="text-sm font-medium">Type</label>
              <Select
                value={formData.type}
                onValueChange={(value) =>
                  setFormData({ ...formData, type: value })
                }
              >
                <SelectTrigger>
                  <SelectValue placeholder="Select type" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="pipe">Pipe</SelectItem>
                  <SelectItem value="sheet">Sheet</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div className="space-y-2">
              <label className="text-sm font-medium">Grade</label>
              <Select
                value={formData.grade}
                onValueChange={(value) =>
                  setFormData({ ...formData, grade: value })
                }
              >
                <SelectTrigger>
                  <SelectValue placeholder="Select grade" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="304">304</SelectItem>
                  <SelectItem value="202">202</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div className="space-y-2">
              <label className="text-sm font-medium">Size</label>
              <Input
                value={formData.size}
                onChange={(e) =>
                  setFormData({ ...formData, size: e.target.value })
                }
              />
            </div>
            <div className="space-y-2">
              <label className="text-sm font-medium">Gauge</label>
              <Input
                value={formData.gauge}
                onChange={(e) =>
                  setFormData({ ...formData, gauge: e.target.value })
                }
              />
            </div>
          </>
        );

      case "Fitting":
        return (
          <>
            <div className="space-y-2">
              <label className="text-sm font-medium">Subcategory</label>
              <Select
                value={formData.subCategory}
                onValueChange={(value) =>
                  setFormData({ ...formData, subCategory: value })
                }
              >
                <SelectTrigger>
                  <SelectValue placeholder="Select subcategory" />
                </SelectTrigger>
                <SelectContent>
                  {FITTING_SUBCATEGORIES.map((category) => (
                    <SelectItem key={category} value={category}>
                      {category.replace(/_/g, " ")}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
            <div className="space-y-2">
              <label className="text-sm font-medium">Size</label>
              <Input
                value={formData.size}
                onChange={(e) =>
                  setFormData({ ...formData, size: e.target.value })
                }
              />
            </div>
            <div className="space-y-2">
              <label className="text-sm font-medium">Type</label>
              <Select
                value={formData.type}
                onValueChange={(value) =>
                  setFormData({ ...formData, type: value })
                }
              >
                <SelectTrigger>
                  <SelectValue placeholder="Select type" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="Round">Round</SelectItem>
                  <SelectItem value="Square">Square</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </>
        );

      case "Polish":
        return (
          <>
            <div className="space-y-2">
              <label className="text-sm font-medium">Type</label>
              <Input
                value={formData.type}
                onChange={(e) =>
                  setFormData({ ...formData, type: e.target.value })
                }
              />
            </div>
            <div className="space-y-2">
              <label className="text-sm font-medium">Specification</label>
              <Input
                value={formData.specification}
                onChange={(e) =>
                  setFormData({ ...formData, specification: e.target.value })
                }
              />
            </div>
            <div className="space-y-2">
              <label className="text-sm font-medium">Variant</label>
              <Select
                value={formData.variant || ""}
                onValueChange={(value) =>
                  setFormData({ ...formData, variant: value })
                }
              >
                <SelectTrigger>
                  <SelectValue placeholder="Select variant" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="One Side">One Side</SelectItem>
                  <SelectItem value="Two Side">Two Side</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </>
        );
    }
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      <div className="space-y-2">
        <label className="text-sm font-medium">Item Type</label>
        <Select value={itemType} onValueChange={setItemType}>
          <SelectTrigger>
            <SelectValue placeholder="Select item type" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="PipeSheet">Pipe/Sheet</SelectItem>
            <SelectItem value="Fitting">Fitting</SelectItem>
            <SelectItem value="Polish">Polish</SelectItem>
          </SelectContent>
        </Select>
      </div>

      <div className="grid grid-cols-2 gap-4">
        <div className="space-y-2">
          <label className="text-sm font-medium">Name</label>
          <Input
            value={formData.name}
            onChange={(e) => setFormData({ ...formData, name: e.target.value })}
            required
          />
        </div>
        <div className="space-y-2">
          <label className="text-sm font-medium">Code</label>
          <Input
            value={formData.code}
            onChange={(e) => setFormData({ ...formData, code: e.target.value })}
            required
          />
        </div>

        {renderTypeSpecificFields()}

        <div className="space-y-2">
          <label className="text-sm font-medium">Current Stock</label>
          <Input
            type="number"
            value={formData.currentStock}
            onChange={(e) =>
              setFormData({ ...formData, currentStock: Number(e.target.value) })
            }
            required
          />
        </div>
        <div className="space-y-2">
          <label className="text-sm font-medium">Minimum Stock</label>
          <Input
            type="number"
            value={formData.minimumStock}
            onChange={(e) =>
              setFormData({ ...formData, minimumStock: Number(e.target.value) })
            }
            required
          />
        </div>
        <div className="space-y-2">
          <label className="text-sm font-medium">Purchase Rate</label>
          <Input
            type="number"
            value={formData.purchaseRate}
            onChange={(e) =>
              setFormData({ ...formData, purchaseRate: Number(e.target.value) })
            }
            required
          />
        </div>
        <div className="space-y-2">
          <label className="text-sm font-medium">Selling Rate</label>
          <Input
            type="number"
            value={Number(formData.sellingRate)
              .toFixed(2)
              .replace(/[.,]00$/, "")}
            onChange={(e) =>
              setFormData({
                ...formData,
                sellingRate: Number(e.target.value),
              })
            }
            required
          />
        </div>
      </div>

      <div className="flex justify-end gap-3 mt-6">
        <Button type="button" variant="outline" onClick={onCancel}>
          Cancel
        </Button>
        <Button type="submit">
          {initialData ? "Update Item" : "Create Item"}
        </Button>
      </div>
    </form>
  );
}

const FITTING_SUBCATEGORIES = [
  "ball",
  "ball_with_nut",
  "base",
  "thali_base",
  "cap",
  "bush",
  "l_drop",
  "stopper",
  "d_lock",
  "hinges",
  "balustred_cap",
  "baluster",
  "master_pillar",
  "starwindow",
  "butterfly",
  "gamla",
  "step",
  "baind",
  "star_ring",
  "ring",
  "bhala",
  "braket",
  "ground_braket",
  "om",
  "swastik",
  "shubh_labh",
  "mel_femel_nut",
  "flower",
  "bail",
  "gate_wheel",
  "gate_opener",
];




==================================================================
FILE: ./components/Forms/LedgerModal.tsx
==================================================================
import React from "react";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";

export interface TransactionData {
  _id: string;
  date: string;
  documentNumber: string;
  type: "debit" | "credit";
  mode: "cash" | "cheque" | "online" | "purchase" | "sale";
  amount: number;
  reference?: string;
  notes?: string;
  balance: number;
}

interface LedgerModalProps {
  transactions: TransactionData[];
  onClose: () => void;
  open: boolean;
  onDateSelect?: (date: Date) => void;
}

export function LedgerModal({ transactions, onClose, open }: LedgerModalProps) {
  const formatDate = (date: string) => {
    return new Date(date).toLocaleDateString();
  };

  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat("en-IN", {
      style: "currency",
      currency: "INR",
    }).format(amount);
  };

  return (
    <Dialog open={open} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-3xl">
        <DialogHeader>
          <DialogTitle>Transaction History</DialogTitle>
        </DialogHeader>
        <div className="max-h-[60vh] overflow-auto">
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Date</TableHead>
                <TableHead>Document</TableHead>
                <TableHead>Type</TableHead>
                <TableHead>Mode</TableHead>
                <TableHead className="text-right">Amount</TableHead>
                <TableHead className="text-right">Balance</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {transactions.map((transaction) => (
                <TableRow key={transaction._id}>
                  <TableCell>{formatDate(transaction.date)}</TableCell>
                  <TableCell>{transaction.documentNumber}</TableCell>
                  <TableCell>
                    <span
                      className={`${
                        transaction.type === "debit"
                          ? "text-red-600"
                          : "text-green-600"
                      } capitalize`}
                    >
                      {transaction.type}
                    </span>
                  </TableCell>
                  <TableCell className="capitalize">
                    {transaction.mode}
                  </TableCell>
                  <TableCell className="text-right">
                    {formatCurrency(transaction.amount)}
                  </TableCell>
                  <TableCell className="text-right">
                    {formatCurrency(transaction.balance)}
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </div>
      </DialogContent>
    </Dialog>
  );
}




==================================================================
FILE: ./components/Forms/PaymentModal.tsx
==================================================================
import React, { useState } from "react";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { addPayment } from "@/api/transaction";
import toast from "react-hot-toast";

interface PaymentModalProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  purchase: {
    _id: string;
    purchaseNumber: string;
    grandTotal: number;
    balanceAmount: number;
  };
  onSuccess: () => void;
}

interface PaymentFormData {
  amount: string;
  mode: "cash" | "cheque" | "online";
  reference: string;
  notes?: string;
}

export default function PaymentModal({
  open,
  onOpenChange,
  purchase,
  onSuccess,
}: PaymentModalProps) {
  const [formData, setFormData] = useState<PaymentFormData>({
    amount: "",
    mode: "cash",
    reference: "",
    notes: "",
  });

  const handleFullAmount = () => {
    setFormData((prev) => ({
      ...prev,
      amount: purchase.balanceAmount.toString(),
    }));
  };

  const handleSubmit = async () => {
    try {
      if (!formData.amount || Number(formData.amount) <= 0) {
        toast.error("Please enter a valid amount");
        return;
      }

      if (Number(formData.amount) > purchase.balanceAmount) {
        toast.error("Amount cannot be greater than balance amount");
        return;
      }

      if (formData.mode !== "cash" && !formData.reference) {
        toast.error("Reference number is required for cheque/online payments");
        return;
      }

      const response = await addPayment(purchase._id, {
        amount: Number(formData.amount),
        mode: formData.mode,
        reference: formData.reference,
        notes: formData.notes || `Payment against ${purchase.purchaseNumber}`,
      });

      if (response?.data?.statusCode === 200) {
        toast.success("Payment added successfully");
        onSuccess();
        onOpenChange(false);
      }
    } catch (error) {
      toast.error("Failed to add payment");
    }
  };

  return (
    <DialogContent className="sm:max-w-[425px]">
      <DialogHeader>
        <DialogTitle>Add Payment</DialogTitle>
      </DialogHeader>

      <div className="grid gap-4 py-4">
        <div>
          <span className="block text-sm font-medium mb-2">Purchase Order</span>
          <span className="text-sm">{purchase.purchaseNumber}</span>
        </div>

        <div>
          <span className="block text-sm font-medium mb-2">Balance Amount</span>
          <span className="text-sm">
            ₹{purchase.balanceAmount.toLocaleString()}
          </span>
        </div>

        <div>
          <div className="flex items-center justify-between mb-1">
            <label className="text-sm font-medium">Amount*</label>
            <Button
              type="button"
              variant="secondary"
              size="sm"
              onClick={handleFullAmount}
              className="h-7 text-xs px-2"
            >
              Add Full Amount
            </Button>
          </div>
          <Input
            type="number"
            max={purchase.balanceAmount}
            value={formData.amount}
            onChange={(e) =>
              setFormData((prev) => ({ ...prev, amount: e.target.value }))
            }
          />
        </div>

        <div>
          <label className="text-sm font-medium mb-1 block">
            Payment Mode*
          </label>
          <Select
            value={formData.mode}
            onValueChange={(value: "cash" | "cheque" | "online") =>
              setFormData((prev) => ({ ...prev, mode: value }))
            }
          >
            <SelectTrigger>
              <SelectValue placeholder="Select payment mode" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="cash">Cash</SelectItem>
              <SelectItem value="cheque">Cheque</SelectItem>
              <SelectItem value="online">Online</SelectItem>
            </SelectContent>
          </Select>
        </div>

        {formData.mode !== "cash" && (
          <div>
            <label className="text-sm font-medium mb-1 block">
              Reference Number*
            </label>
            <Input
              value={formData.reference}
              onChange={(e) =>
                setFormData((prev) => ({ ...prev, reference: e.target.value }))
              }
            />
          </div>
        )}

        <div>
          <label className="text-sm font-medium mb-1 block">Notes</label>
          <Input
            value={formData.notes}
            onChange={(e) =>
              setFormData((prev) => ({ ...prev, notes: e.target.value }))
            }
          />
        </div>
      </div>

      <div className="flex justify-end gap-2">
        <Button variant="outline" onClick={() => onOpenChange(false)}>
          Cancel
        </Button>
        <Button onClick={handleSubmit}>Add Payment</Button>
      </div>
    </DialogContent>
  );
}




==================================================================
FILE: ./components/Forms/PurchaseForm.tsx
==================================================================
import React, { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Download, FileSpreadsheet, Plus, Trash2 } from "lucide-react";
import toast from "react-hot-toast";
import VendorForm from "@/components/Forms/VendorForm";
import * as XLSX from "xlsx";
import { createPurchase } from "@/api/purchase";
import { LedgerModal, TransactionData } from "./LedgerModal";
import { getVendorLedger } from "@/api/transaction";
// import { format as dateFormat } from "date-fns";
import DatePicker from "../ui/DatePicker";
import SummaryPurchase from "../Purchase/SummaryPurchase";

interface Vendor {
  id: string;
  name: string;
  gstin: string;
  _id: string;
}

// Update the form data interface
export interface PurchaseFormData {
  vendorId: string;
  date: Date;
  ewayBillNo: string;
  invoiceNo: string;
  paymentTerms: string;
  destination: string;
  vehicleNo: string;
  freight: number;
  tcs: number;
  discount: number;
  amountPaid: number;
  paymentMode: "cash" | "cheque" | "online";
  paymentReference: string;
}

interface ProcessedItem {
  name: string;
  grade?: string;
  pieces?: number;
  weight?: number;
  size?: string;
  gauge?: string;
  category?: string;
  rate: number;
  amount: number;
  gst: number;
  gstAmount: number;
  margin?: number;
  rawData: any;
  type?: string;
  subCategory?: string;
  fittingType?: string;
  specification?: string;
}

interface ProcessedFileData {
  items: ProcessedItem[];
  totalAmount: number;
  totalTax: number;
  netAmount: number;
}

interface PurchaseModalProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  vendors: Vendor[];
  isLoading: boolean;
  onSuccess?: () => void;
  fetchVendors: () => void;
}

const ITEM_TYPES = [
  { value: "pipe", label: "Pipes" },
  { value: "sheet", label: "Sheets" },
  { value: "fitting", label: "Fittings" },
  { value: "polish", label: "Polish Items" },
];

// Updated file headers based on your CSV files
const FILE_HEADERS = {
  pipe: [
    "Type",
    "Grade",
    "Size",
    "Guage",
    "Pieces",
    "Weight",
    "Rate",
    "GST",
    "Margin (%)",
  ],
  sheet: [
    "Type",
    "Grade",
    "Size",
    "Guage",
    "Pieces",
    "Weight",
    "Rate",
    "GST",
    "Margin (%)",
  ],
  fitting: [
    "Sub Category",
    "Type",
    "Size",
    "Category",
    "Pieces",
    "Weight",
    "Rate",
    "GST",
    "Margin (%)",
  ],
  polish: [
    "Sub Category",
    "Specification",
    "Pieces",
    "Rate",
    "GST",
    "Margin (%)",
  ],
};

const PurchaseModal = ({
  open,
  onOpenChange,
  vendors,
  isLoading,
  onSuccess,
  fetchVendors,
}: PurchaseModalProps) => {
  const [vendorOpen, setVendorOpen] = useState(false);
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const [itemType, setItemType] = useState<string>("");
  const [processedData, setProcessedData] = useState<{
    items: any[];
    totalAmount: number;
    totalTax: number;
    netAmount: number;
  } | null>(null);

  const [showLedger, setShowLedger] = useState(false);
  const [transactions, setTransactions] = useState<TransactionData[]>([]);
  // const [date, setDate] = React.useState<Date>();

  const [formData, setFormData] = useState<PurchaseFormData>({
    vendorId: "",
    date: new Date(),
    ewayBillNo: "",
    invoiceNo: "",
    paymentTerms: "",
    destination: "",
    vehicleNo: "",
    freight: 0,
    tcs: 0,
    discount: 0,
    amountPaid: 0,
    paymentMode: "cash",
    paymentReference: "",
  });

  const handleViewLedger = async (vendorId: string) => {
    try {
      const response = await getVendorLedger(vendorId);
      if (response?.data.success) {
        setTransactions(response.data.data);
        setShowLedger(true);
      }
    } catch (error) {
      toast.error("Failed to fetch ledger");
    }
  };

  const validateFileFormat = (headers: string[], type: string): boolean => {
    const expectedHeaders = FILE_HEADERS[type as keyof typeof FILE_HEADERS];
    if (!expectedHeaders) return false;

    const normalizedHeaders = headers.map((h) => h.trim().toLowerCase());
    const normalizedExpected = expectedHeaders.map((h) =>
      h.trim().toLowerCase()
    );

    return normalizedExpected.every((header) =>
      normalizedHeaders.includes(header)
    );
  };

  const formatItemName = (row: any, type: string) => {
    const parts = [];

    if (type === "pipe" || type === "sheet") {
      if (row["Type"]) parts.push(row["Type"]);
      if (row["Grade"]) parts.push(row["Grade"]);
      if (row["Size"]) parts.push(formatSize(row["Size"]));
      if (row["Guage"]) parts.push(`${row["Guage"]}G`);
    } else if (type === "fitting") {
      if (row["Sub Category"]) parts.push(row["Sub Category"]);
      if (row["Type"]) parts.push(row["Type"]);
      if (row["Size"]) parts.push(formatSize(row["Size"]));
      if (row["Category"]) parts.push(row["Category"]);
    } else if (type === "polish") {
      if (row["Sub Category"]) parts.push(row["Sub Category"]);
      if (row["Specification"]) parts.push(row["Specification"]);
    }

    return parts.filter(Boolean).join("-");
  };

  const formatCurrency = (amount: number) => {
    // Convert to 2 decimal places first
    const roundedAmount = Number(Number(amount).toFixed(2));

    // Check if it's a whole number
    const isWholeNumber = roundedAmount % 1 === 0;
    // Format accordingly
    return `₹${
      isWholeNumber ? Math.round(roundedAmount) : roundedAmount?.toFixed(2)
    }`;
  };

  const formatSize = (size: string) => {
    return size?.replace(/'/g, "'").replace(/"/g, '"') || "";
  };

  const shouldUseWeight = (type: string, subCategory?: string) => {
    return (
      type === "pipe" ||
      type === "sheet" ||
      (type === "fitting" && subCategory === "Bush")
    );
  };

  const processExcelData = async (file: File) => {
    const reader = new FileReader();

    reader.onload = async (e) => {
      try {
        const data = e.target?.result;
        const workbook = XLSX.read(data, { type: "binary" });
        const worksheet = workbook.Sheets[workbook.SheetNames[0]];
        const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });
        const headers = jsonData[0] as string[];

        if (!validateFileFormat(headers, itemType)) {
          toast.error(
            `Invalid file format for ${itemType} items. Please check the sample file.`
          );
          setSelectedFile(null);
          return;
        }

        const rows = XLSX.utils.sheet_to_json(worksheet);
        const processedItems = rows.map((row: any): ProcessedItem => {
          const name = formatItemName(row, itemType);
          const grade = row["Grade"];
          const pieces = Number(row["Pieces"]) || undefined;
          const weight = Number(row["Weight"]) || undefined;
          const rate = Number(row["Rate"]) || 0;
          const gst = Number(row["GST"]) || 0;
          const specification = row["Specification"] || "";

          // Calculate amount based on weight for specific items
          const amount = shouldUseWeight(itemType, row["Sub Category"])
            ? (weight || 0) * rate
            : (pieces || 0) * rate;

          const gstAmount = (amount * gst) / 100;

          // For fitting items, store Type in a separate field
          const typeValue = itemType === "fitting" ? row["Type"] : undefined;

          return {
            name,
            pieces,
            grade,
            weight,
            size: row["Size"] ? formatSize(row["Size"]) : undefined,
            gauge: row["Guage"] || undefined,
            category: row["Category"] || undefined,
            rate,
            amount,
            gst,
            gstAmount,
            margin: Number(row["Margin (%)"]) || 0,
            rawData: row,
            type: itemType,
            subCategory: row["Sub Category"],
            fittingType: typeValue,
            specification,
          };
        });

        const totalAmount = processedItems.reduce(
          (sum, item) => sum + item.amount,
          0
        );
        const totalTax = processedItems.reduce(
          (sum, item) => sum + item.gstAmount,
          0
        );

        setProcessedData({
          items: processedItems,
          totalAmount,
          totalTax,
          netAmount: totalAmount + totalTax,
        });
      } catch (error) {
        console.error("Error processing file:", error);
        toast.error("Error processing file. Please check the format.");
        setSelectedFile(null);
      }
    };

    reader.readAsBinaryString(file);
  };

  const handleInputChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>
  ) => {
    const { name, value } = e.target;
    if (e.target.type === "number" && Number(value) < 0) return;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  const handleFileSelect = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      setSelectedFile(file);
      await processExcelData(file);
    }
  };

  const handleVendorSelect = (value: string) => {
    setFormData((prev) => ({ ...prev, vendorId: value }));
  };

  const calculateFinalAmounts = () => {
    if (!processedData) return null;

    const discountAmount =
      (processedData.totalAmount * Number(formData.discount)) / 100;
    const afterDiscount = processedData.totalAmount - discountAmount;
    const finalTax = processedData.totalTax;
    const freightAmount = Number(formData.freight) || 0;
    const tcsAmount = Number(formData.tcs) || 0;
    const grandTotal = afterDiscount + finalTax + freightAmount + tcsAmount;
    const balance = grandTotal - Number(formData.amountPaid);

    return {
      discountAmount,
      afterDiscount,
      finalTax,
      freightAmount,
      tcsAmount,
      grandTotal,
      balance,
    };
  };
  const getSampleFileUrl = (type: string) => {
    // const baseUrl = "/";
    switch (type) {
      case "pipe":
      case "sheet":
        return `/Items-Pipe_Sheet.xlsx`;
      case "fitting":
        return `/Items-Fitting.xlsx`;
      case "polish":
        return `/Items-Polish Items.xlsx`;
      default:
        return "";
    }
  };

  const handleSubmit = async () => {
    try {
      if (!formData.vendorId || !formData.date || !formData.invoiceNo) {
        toast.error("Please fill in all required fields");
        return;
      }

      if (!processedData?.items.length) {
        toast.error("Please upload and process the purchase list");
        return;
      }

      const calculations = calculateFinalAmounts();
      if (!calculations) return;

      // Transform items to match backend schema
      const transformedItems = processedData.items.map((item) => ({
        name: item.name,
        type: item.type,
        size: item.size,
        gauge: item.gauge,
        category: item.category,
        subCategory: item.subCategory,
        pieces: item.pieces,
        weight: item.weight,
        rate: item.rate,
        amount: item.amount,
        gst: item.gst,
        gstAmount: item.gstAmount,
        margin: item.margin || 0,
        fittingType: item.type == "fitting" ? item.fittingType : "",
      }));

      const purchaseData = {
        vendorId: formData.vendorId,
        date: formData.date,
        ewayBillNo: formData.ewayBillNo,
        invoiceNo: formData.invoiceNo,
        paymentTerms: formData.paymentTerms,
        destination: formData.destination,
        vehicleNo: formData.vehicleNo,
        items: transformedItems,
        discount: Number(formData.discount),
        taxableAmount: processedData.totalAmount,
        discountAmount: calculations.discountAmount,
        totalTax: processedData.totalTax,
        grandTotal: calculations.grandTotal,
        payments:
          formData.amountPaid > 0
            ? [
                {
                  amount: Number(formData.amountPaid),
                  mode: formData.paymentMode,
                  reference: formData.paymentReference,
                  date: new Date(),
                },
              ]
            : [],
        balanceAmount: calculations.balance,
      };

      const response = await createPurchase({
        ...purchaseData,
        freight: formData.freight,
        tcs: formData.tcs,
        amountPaid: formData.amountPaid,
        paymentMode: formData.paymentMode,
        paymentReference: formData.paymentReference,
      });

      if (response?.data.statusCode === 201) {
        toast.success("Purchase created successfully");
        onOpenChange(false);
        onSuccess?.();
        resetForm();
      }
    } catch (error) {
      toast.error(
        error instanceof Error ? error.message : "Failed to create purchase"
      );
    }
  };

  const resetForm = () => {
    setFormData({
      vendorId: "",
      date: new Date(),
      ewayBillNo: "",
      invoiceNo: "",
      paymentTerms: "",
      destination: "",
      vehicleNo: "",
      freight: 0,
      tcs: 0,
      discount: 0,
      amountPaid: 0,
      paymentMode: "cash",
      paymentReference: "",
    });
    setSelectedFile(null);
    setProcessedData(null);
    setItemType("");
  };

  const renderTableColumns = () => {
    const columns = [];
    columns.push(<TableHead key="details">Details</TableHead>);

    if (itemType === "pipe" || itemType === "sheet") {
      columns.push(
        <TableHead key="grade" className="text-right">
          Grade
        </TableHead>,
        <TableHead key="size" className="text-right">
          Size
        </TableHead>,
        <TableHead key="gauge" className="text-right">
          Gauge
        </TableHead>
      );
    } else if (itemType === "fitting") {
      columns.push(
        <TableHead key="size" className="text-right">
          Size
        </TableHead>,
        <TableHead key="type" className="text-right">
          Type
        </TableHead>,
        <TableHead key="category" className="text-right">
          Category
        </TableHead>
      );
    } else if (itemType === "polish") {
      columns.push(
        <TableHead key="specification" className="text-right">
          Specification
        </TableHead>
      );
    }

    columns.push(
      <TableHead key="pieces" className="text-right">
        Pieces
      </TableHead>,
      <TableHead key="weight" className="text-right">
        Weight
      </TableHead>,
      <TableHead key="rate" className="text-right">
        Rate
      </TableHead>,
      <TableHead key="amount" className="text-right">
        Amount
      </TableHead>,
      <TableHead key="gst" className="text-right">
        GST %
      </TableHead>,
      <TableHead key="gstAmount" className="text-right">
        GST Amount
      </TableHead>
    );

    return columns;
  };

  const renderTableCell = (item: ProcessedItem) => {
    const cells = [];
    cells.push(<TableCell key="details">{item.name}</TableCell>);

    if (itemType === "pipe" || itemType === "sheet") {
      cells.push(
        <TableCell key="grade" className="text-right">
          {item.grade || "-"}
        </TableCell>,
        <TableCell key="size" className="text-right">
          {item.size || "-"}
        </TableCell>,
        <TableCell key="gauge" className="text-right">
          {item.gauge || "-"}
        </TableCell>
      );
    } else if (itemType === "fitting") {
      cells.push(
        <TableCell key="size" className="text-right">
          {item.size || "-"}
        </TableCell>,
        <TableCell key="category" className="text-right">
          {item.fittingType || "-"}
        </TableCell>,
        <TableCell key="category" className="text-right">
          {item.category || "-"}
        </TableCell>
      );
    } else if (itemType === "polish") {
      cells.push(
        <TableCell key="size" className="text-right">
          {item.specification || "-"}
        </TableCell>
      );
    }

    cells.push(
      <TableCell key="pieces" className="text-right">
        {item.pieces || "-"}
      </TableCell>,
      <TableCell key="weight" className="text-right">
        {item.weight ? `${item.weight.toFixed(2)} kg` : "-"}
      </TableCell>,
      <TableCell key="rate" className="text-right">
        {formatCurrency(item.rate)}
      </TableCell>,
      <TableCell key="amount" className="text-right">
        {formatCurrency(item.amount)}
      </TableCell>,
      <TableCell key="gst" className="text-right">
        {item.gst}%
      </TableCell>,
      <TableCell key="gstAmount" className="text-right">
        {formatCurrency(item.gstAmount)}
      </TableCell>
    );

    return cells;
  };

  return (
    <DialogContent className="sm:max-w-4xl max-h-[90vh] overflow-y-auto">
      <DialogHeader>
        <DialogTitle>Add New Purchase</DialogTitle>
        <DialogDescription>
          Upload purchase details and enter additional information
        </DialogDescription>
      </DialogHeader>

      <div className="grid gap-6 py-4">
        {/* Basic Purchase Details */}
        <div className="grid grid-cols-2 gap-4">
          <div className="flex gap-2">
            <div className="flex-1">
              <label className="text-sm font-medium mb-1 block">
                Vendor Name*
              </label>
              <Select
                value={formData.vendorId}
                onValueChange={handleVendorSelect}
              >
                <SelectTrigger>
                  <SelectValue placeholder="Select vendor" />
                </SelectTrigger>
                <SelectContent>
                  {vendors.length === 0 ? (
                    <SelectItem value="No Vendors" disabled>
                      No vendors found
                    </SelectItem>
                  ) : (
                    vendors.map((vendor) => (
                      <SelectItem key={vendor._id} value={vendor._id}>
                        {vendor.name}
                      </SelectItem>
                    ))
                  )}
                </SelectContent>
              </Select>

              {formData.vendorId && (
                <Button
                  variant="outline"
                  className="mt-2 bg-accent text-white hover:bg-accent border-0 text-[13px]"
                  size="xs"
                  onClick={() => handleViewLedger(formData.vendorId)}
                >
                  View Ledger
                </Button>
              )}
            </div>
            <Dialog open={vendorOpen} onOpenChange={setVendorOpen}>
              <DialogTrigger asChild>
                <Button className="mt-6" variant="outline" size="icon">
                  <Plus className="h-4 w-4" />
                </Button>
              </DialogTrigger>
              <DialogContent>
                <DialogHeader>
                  <DialogTitle>Add New Vendor</DialogTitle>
                </DialogHeader>
                <VendorForm
                  onSuccess={() => {
                    setVendorOpen(false);
                    fetchVendors();
                  }}
                  onCancel={() => setVendorOpen(false)}
                />
              </DialogContent>
            </Dialog>
          </div>

          <div>
            <label className="text-sm font-medium mb-1 block">
              Purchase Date*
            </label>
            <DatePicker
              date={formData?.date}
              onDateChange={(newDate) => {
                // setDate(newDate);
                if (newDate) {
                  setFormData((prev) => ({
                    ...prev,
                    date: newDate,
                  }));
                }
              }}
            />
          </div>

          <div>
            <label className="text-sm font-medium mb-1 block">
              Vehicle No.
            </label>
            <Input
              name="vehicleNo"
              placeholder="Enter vehicle number"
              value={formData.vehicleNo}
              onChange={handleInputChange}
            />
          </div>

          <div>
            <label className="text-sm font-medium mb-1 block">
              E-way Bill No.
            </label>
            <Input
              name="ewayBillNo"
              placeholder="Enter e-way bill number"
              value={formData.ewayBillNo}
              onChange={handleInputChange}
            />
          </div>

          <div>
            <label className="text-sm font-medium mb-1 block">
              Invoice No*
            </label>
            <Input
              name="invoiceNo"
              placeholder="Enter invoice number"
              value={formData.invoiceNo}
              onChange={handleInputChange}
            />
          </div>
        </div>

        {/* Item Type and File Upload */}
        <div className="space-y-4">
          <div>
            <label className="text-sm font-medium mb-1 block">Item Type*</label>
            <Select value={itemType} onValueChange={setItemType}>
              <SelectTrigger>
                <SelectValue placeholder="Select item type" />
              </SelectTrigger>
              <SelectContent>
                {ITEM_TYPES.map((type) => (
                  <SelectItem key={type.value} value={type.value}>
                    {type.label}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>

          {itemType && (
            <div className="space-y-4">
              <div className="flex justify-between items-center">
                <label className="text-sm font-medium">Purchase List</label>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => window.open(getSampleFileUrl(itemType))}
                >
                  <Download className="h-4 w-4 mr-2" /> Download Sample
                </Button>
              </div>

              {!processedData ? (
                <Card>
                  <CardContent className="pt-6">
                    <div className="border-2 border-dashed border-gray-200 rounded-lg p-6 text-center">
                      <input
                        type="file"
                        id="file-upload"
                        className="hidden"
                        accept=".xlsx,.xls,.csv"
                        onChange={handleFileSelect}
                      />
                      <label
                        htmlFor="file-upload"
                        className="cursor-pointer flex flex-col items-center"
                      >
                        <FileSpreadsheet className="h-12 w-12 text-gray-400 mb-4" />
                        <span className="text-sm font-medium mb-2">
                          {selectedFile
                            ? selectedFile.name
                            : "Upload Purchase Excel"}
                        </span>
                        <span className="text-xs text-gray-500">
                          Drag and drop or click to select
                        </span>
                      </label>
                    </div>
                  </CardContent>
                </Card>
              ) : (
                <div className="space-y-4">
                  <div className="flex justify-between items-center">
                    <h3 className="text-sm font-medium">Processed Items</h3>
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => {
                        setProcessedData(null);
                        setSelectedFile(null);
                      }}
                    >
                      <Trash2 className="h-4 w-4 mr-2" /> Clear
                    </Button>
                  </div>
                  <div className="border rounded-md">
                    <Table>
                      <TableHeader>
                        <TableRow>{renderTableColumns()}</TableRow>
                      </TableHeader>
                      <TableBody>
                        {processedData.items.map((item, index) => (
                          <TableRow key={index}>
                            {renderTableCell(item)}
                          </TableRow>
                        ))}
                        <TableRow className="font-medium">
                          <TableCell colSpan={renderTableColumns().length - 3}>
                            Total
                          </TableCell>
                          <TableCell className="text-right">
                            {formatCurrency(processedData.totalAmount)}
                          </TableCell>
                          <TableCell></TableCell>
                          <TableCell className="text-right">
                            {formatCurrency(processedData.totalTax)}
                          </TableCell>
                        </TableRow>
                      </TableBody>
                    </Table>
                  </div>
                </div>
              )}
            </div>
          )}
        </div>

        {/* Payment Details */}
        {processedData && (
          <div className="space-y-6">
            <div className="grid grid-cols-2 gap-4">
              <div>
                <label className="text-sm font-medium mb-1 block">
                  Extra Discount (%)
                </label>
                <Input
                  type="number"
                  name="discount"
                  placeholder="0.00"
                  value={formData.discount}
                  onChange={handleInputChange}
                />
              </div>
              <div>
                <label className="text-sm font-medium mb-1 block">
                  Amount Paid
                </label>
                <Input
                  type="number"
                  name="amountPaid"
                  placeholder="0.00"
                  value={formData.amountPaid}
                  onChange={handleInputChange}
                />
              </div>
              <div>
                <label className="text-sm font-medium mb-1 block">
                  Payment Mode
                </label>
                <Select
                  value={formData.paymentMode}
                  onValueChange={(value) =>
                    setFormData((prev) => ({
                      ...prev,
                      paymentMode: value as "cash" | "cheque" | "online",
                    }))
                  }
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Select payment mode" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="cash">Cash</SelectItem>
                    <SelectItem value="cheque">Cheque</SelectItem>
                    <SelectItem value="online">Online</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              {formData.paymentMode !== "cash" && (
                <div>
                  <label className="text-sm font-medium mb-1 block">
                    Reference Number
                  </label>
                  <Input
                    name="paymentReference"
                    placeholder="Enter reference number"
                    value={formData.paymentReference}
                    onChange={handleInputChange}
                  />
                </div>
              )}

              <div>
                <label className="text-sm font-medium mb-1 block">
                  Payment Terms
                </label>
                <Input
                  name="paymentTerms"
                  placeholder="Enter payment terms"
                  value={formData.paymentTerms}
                  onChange={handleInputChange}
                />
              </div>

              <div>
                <label className="text-sm font-medium mb-1 block">
                  Freight
                </label>
                <Input
                  type="number"
                  name="freight"
                  placeholder="0.00"
                  value={formData.freight}
                  onChange={handleInputChange}
                  min="0"
                />
              </div>

              <div>
                <label className="text-sm font-medium mb-1 block">
                  TCS Amount
                </label>
                <Input
                  type="number"
                  name="tcs"
                  placeholder="0.00"
                  value={formData.tcs}
                  onChange={handleInputChange}
                  min="0"
                />
              </div>
            </div>

            {/* Summary */}
            <SummaryPurchase
              calculateFinalAmounts={calculateFinalAmounts}
              processedData={processedData}
              formData={formData}
              formatCurrency={formatCurrency}
            />
          </div>
        )}
      </div>

      {/* Action Buttons */}
      <div className="flex justify-end gap-2 mt-4">
        <Button variant="outline" onClick={() => onOpenChange(false)}>
          Cancel
        </Button>
        <Button onClick={handleSubmit}>Submit</Button>
      </div>

      {showLedger && (
        <LedgerModal
          transactions={transactions}
          open={showLedger}
          onClose={() => setShowLedger(false)}
        />
      )}
    </DialogContent>
  );
};

export default PurchaseModal;




==================================================================
FILE: ./components/Forms/VendorForm.tsx
==================================================================
"use client";

import { useForm } from "react-hook-form";
import toast from "react-hot-toast";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { AlertCircle, Plus } from "lucide-react";
import { addVendor } from "@/api/vendor";

interface VendorFormProps {
  onSuccess?: () => void;
  onCancel?: () => void;
}
interface VendorFormData {
  businessName: string;
  gstin: string;
  contactPerson: string;
  phone: string;
  email: string;
  addressLine1: string;
  addressLine2: string;
  city: string;
  pincode: string;
  creditLimit: number;
  currentBalance: number;
}

export default function VendorForm({ onSuccess, onCancel }: VendorFormProps) {
  const {
    register,
    handleSubmit,
    reset,
    formState: { errors },
  } = useForm<VendorFormData>();

  const onSubmit = async (data: VendorFormData) => {
    try {
      const res = await addVendor(data);

      if (res?.data.statusCode === 200 || res?.data.statusCode === 201) {
        toast.success("Vendor created successfully");
        reset();
        onSuccess?.();
      }
    } catch (error) {
      toast.error(
        error instanceof Error ? error.message : "Failed to create vendor"
      );
    }
  };

  return (
    <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
      <div className="grid gap-6 py-4 max-h-[70vh] overflow-y-auto">
        {/* Basic Information */}
        <div className="grid gap-4">
          <div>
            <label className="text-sm font-medium mb-1 block">
              Business Name*
            </label>
            <Input
              {...register("businessName", {
                required: "Business name is required",
              })}
              placeholder="Enter business name"
              className={errors.businessName ? "border-red-500" : ""}
            />
            {errors.businessName && (
              <p className="text-red-500 text-xs mt-1">
                {errors.businessName.message}
              </p>
            )}
          </div>

          <div className="grid grid-cols-2 gap-4">
            <div>
              <label className="text-sm font-medium mb-1 block">GSTIN*</label>
              <Input
                {...register("gstin", {
                  required: "GSTIN is required",
                  pattern: {
                    value:
                      /^[0-9]{2}[A-Z]{5}[0-9]{4}[A-Z]{1}[1-9A-Z]{1}Z[0-9A-Z]{1}$/,
                    message: "Invalid GSTIN format",
                  },
                })}
                placeholder="Enter GSTIN"
                className={errors.gstin ? "border-red-500" : ""}
              />
              {errors.gstin && (
                <p className="text-red-500 text-xs mt-1">
                  {errors.gstin.message}
                </p>
              )}
            </div>

            <div>
              <label className="text-sm font-medium mb-1 block">
                Contact Person*
              </label>
              <Input
                {...register("contactPerson", {
                  required: "Contact person is required",
                })}
                placeholder="Enter contact person name"
                className={errors.contactPerson ? "border-red-500" : ""}
              />
              {errors.contactPerson && (
                <p className="text-red-500 text-xs mt-1">
                  {errors.contactPerson.message}
                </p>
              )}
            </div>
          </div>
        </div>

        {/* Contact Information */}
        <div className="grid gap-4">
          <div className="grid grid-cols-2 gap-4">
            <div>
              <label className="text-sm font-medium mb-1 block">Email</label>
              <Input
                {...register("email", {
                  pattern: {
                    value: /^[^\s@]+@[^\s@]+\.[^\s@]+$/,
                    message: "Invalid email format",
                  },
                })}
                type="email"
                placeholder="Enter email"
                className={errors.email ? "border-red-500" : ""}
              />
              {errors.email && (
                <p className="text-red-500 text-xs mt-1">
                  {errors.email.message}
                </p>
              )}
            </div>

            <div>
              <label className="text-sm font-medium mb-1 block">
                Phone Number*
              </label>
              <Input
                {...register("phone", {
                  required: "Phone number is required",
                  pattern: {
                    value: /^[0-9]{10}$/,
                    message: "Invalid phone number",
                  },
                })}
                placeholder="Enter phone number"
                className={errors.phone ? "border-red-500" : ""}
              />
              {errors.phone && (
                <p className="text-red-500 text-xs mt-1">
                  {errors.phone.message}
                </p>
              )}
            </div>
          </div>

          {/* Address Fields */}
          <div>
            <label className="text-sm font-medium mb-1 block">
              Address Line 1*
            </label>
            <Input
              {...register("addressLine1", {
                required: "Address is required",
              })}
              placeholder="Building number, Street name"
              className={errors.addressLine1 ? "border-red-500" : ""}
            />
            {errors.addressLine1 && (
              <p className="text-red-500 text-xs mt-1">
                {errors.addressLine1.message}
              </p>
            )}
          </div>

          <div>
            <label className="text-sm font-medium mb-1 block">
              Address Line 2
            </label>
            <Input
              {...register("addressLine2")}
              placeholder="Landmark, Area (Optional)"
            />
          </div>

          <div className="grid grid-cols-2 gap-4">
            <div>
              <label className="text-sm font-medium mb-1 block">City</label>
              <Input {...register("city")} placeholder="Enter city" />
            </div>

            <div>
              <label className="text-sm font-medium mb-1 block">Pincode*</label>
              <Input
                {...register("pincode", {
                  required: "Pincode is required",
                  pattern: {
                    value: /^[0-9]{6}$/,
                    message: "Invalid pincode",
                  },
                })}
                placeholder="Enter pincode"
                maxLength={6}
                className={errors.pincode ? "border-red-500" : ""}
              />
              {errors.pincode && (
                <p className="text-red-500 text-xs mt-1">
                  {errors.pincode.message}
                </p>
              )}
            </div>
          </div>
        </div>

        {/* Financial Information */}
        <div className="grid gap-4">
          <div className="grid grid-cols-2 gap-4">
            <div>
              <label className="text-sm font-medium mb-1 block">
                Credit Limit*
              </label>
              <Input
                {...register("creditLimit", {
                  required: "Credit limit is required",
                  min: {
                    value: 0,
                    message: "Credit limit must be positive",
                  },
                })}
                type="number"
                placeholder="Enter credit limit"
                className={errors.creditLimit ? "border-red-500" : ""}
              />
              {errors.creditLimit && (
                <p className="text-red-500 text-xs mt-1">
                  {errors.creditLimit.message}
                </p>
              )}
            </div>

            <div>
              <label className="text-sm font-medium mb-1 block">
                Opening Balance
              </label>
              <Input
                {...register("currentBalance", {
                  valueAsNumber: true,
                })}
                type="number"
                placeholder="Enter opening balance"
              />
            </div>
          </div>
        </div>

        <Alert>
          <AlertCircle className="h-4 w-4" />
          <AlertDescription>
            Make sure to verify the GSTIN number before adding the vendor.
          </AlertDescription>
        </Alert>
      </div>

      {/* Action Buttons */}
      <div className="flex justify-end gap-2">
        {onCancel && (
          <Button type="button" variant="outline" onClick={onCancel}>
            Cancel
          </Button>
        )}
        <Button type="submit">Add Vendor</Button>
      </div>
    </form>
  );
}




==================================================================
FILE: ./components/Purchase/SummaryPurchase.tsx
==================================================================
import React from "react";

const SummaryPurchase: React.FC<{
  calculateFinalAmounts: any;
  processedData: {
    totalAmount: number;
    totalTax: number;
  };
  formData: any;
  formatCurrency: (num: number) => string;
}> = ({ calculateFinalAmounts, processedData, formData, formatCurrency }) => {
  const calculations = calculateFinalAmounts();
  if (!calculations) return null;

  return (
    <div className="bg-gray-50 p-4 rounded-lg space-y-2">
      <div className="flex justify-between">
        <span className="text-sm">Taxable Amount</span>
        <span>{formatCurrency(processedData.totalAmount)}</span>
      </div>
      {formData.discount > 0 && (
        <div className="flex justify-between">
          <span className="text-sm">Discount Amount</span>
          <span>{formatCurrency(calculations.discountAmount)}</span>
        </div>
      )}
      <div className="flex justify-between">
        <span className="text-sm">Total GST</span>
        <span>{formatCurrency(processedData.totalTax)}</span>
      </div>
      {formData.freight > 0 && (
        <div className="flex justify-between">
          <span className="text-sm">Freight</span>
          <span>{formatCurrency(Number(formData.freight))}</span>
        </div>
      )}
      {formData.tcs > 0 && (
        <div className="flex justify-between">
          <span className="text-sm">TCS Amount</span>
          <span>{formatCurrency(Number(formData.tcs))}</span>
        </div>
      )}
      <div className="flex justify-between font-medium pt-2 border-t">
        <span>Grand Total</span>
        <span>{formatCurrency(calculations.grandTotal)}</span>
      </div>
      {formData.amountPaid > 0 && (
        <>
          <div className="flex justify-between text-green-600">
            <span>Amount Paid</span>
            <span>{formatCurrency(Number(formData.amountPaid))}</span>
          </div>
          <div className="flex justify-between text-red-600 font-medium">
            <span>Balance</span>
            <span>{formatCurrency(calculations.balance)}</span>
          </div>
        </>
      )}
    </div>
  );
};

export default SummaryPurchase;




==================================================================
FILE: ./components/dashboard/DashboardTopSection.tsx
==================================================================
"use client";
import { useUser } from "@/contexts/userContext";
import React from "react";

const DashboardTopSection = () => {
  const { user } = useUser();
  return (
    <div className="flex items-center justify-between w-full">
      <div className="space-y-1">
        <h2 className="text-[1.875rem] font-semibold tracking-tight text-[#1E293B]">
          Hi, {user ? `${user?.firstName + " " + user?.lastName}!` : "User"}
        </h2>
        <p className="text-[#64748B]">
          Here's what's happening with your store today.
        </p>
      </div>
      <div className="flex items-center space-x-2">
        <select className="bg-white border border-gray-200 rounded-lg px-4 py-2 text-sm text-[#1E293B] focus:outline-none focus:ring-2 focus:ring-purple-500">
          <option>Last year</option>
          <option>Last month</option>
          <option>Last week</option>
        </select>
        <button className="bg-[#7C3AED] text-white px-4 py-2 rounded-lg text-sm font-medium flex items-center space-x-2 hover:bg-[#6D28D9] transition-colors">
          <span>Export</span>
          <svg
            className="w-4 h-4"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth={2}
              d="M19 9l-7 7-7-7"
            />
          </svg>
        </button>
      </div>
    </div>
  );
};

export default DashboardTopSection;




==================================================================
FILE: ./components/empty-state.tsx
==================================================================
import { PackageX } from "lucide-react";

export function EmptyState({
  title = "No data found",
  description = "Start by creating your first entry.",
}) {
  return (
    <div className="flex h-[450px] w-full flex-col items-center justify-center">
      <PackageX className="h-12 w-12 text-muted-foreground" />
      <h3 className="mt-4 text-lg font-medium text-muted-foreground">
        {title}
      </h3>
      <p className="mt-2 text-sm text-muted-foreground">{description}</p>
    </div>
  );
}




==================================================================
FILE: ./components/header.tsx
==================================================================
"use client";

import { Avatar, AvatarFallback, AvatarImage } from "./ui/avatar";
import { Button } from "./ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "./ui/dropdown-menu";
import Link from "next/link";
import { useUser } from "@/contexts/userContext";

export function Header() {
  const { user } = useUser();

  return (
    <header className="border-b bg-white">
      <div className="flex h-16 items-center px-6">
        <div className="flex items-center ml-auto">
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="ghost" className="relative h-8 w-8 rounded-full">
                <Avatar className="h-10 w-10">
                  <AvatarImage src="/avatars/01.png" alt="User" />
                  <AvatarFallback className="hover:text-text text-lg">
                    {user?.firstName?.[0] || ""}
                    {user?.lastName?.[0] || ""}
                  </AvatarFallback>
                </Avatar>
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent className="w-56" align="end" forceMount>
              <DropdownMenuLabel className="font-normal">
                <div className="flex flex-col space-y-1">
                  <p className="text-sm font-medium leading-none capitalize">
                    {user?.role}
                  </p>
                  <p className="text-xs leading-none text-gray-500">
                    {user?.email}
                  </p>
                </div>
              </DropdownMenuLabel>
              <DropdownMenuSeparator />
              <Link href="/profile">
                <DropdownMenuItem>Profile</DropdownMenuItem>
              </Link>
              <DropdownMenuSeparator />
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      </div>
    </header>
  );
}




==================================================================
FILE: ./components/loading.tsx
==================================================================
import { Loader2 } from "lucide-react";

export function LoadingSpinner() {
  return (
    <div className="flex h-[450px] w-full items-center justify-center">
      <div className="flex flex-col items-center gap-2">
        <Loader2 className="h-8 w-8 animate-spin text-primary" />
        <p className="text-sm text-muted-foreground">Loading...</p>
      </div>
    </div>
  );
}




==================================================================
FILE: ./components/logout-button.tsx
==================================================================
import React from "react";
import { useRouter } from "next/navigation";
import Cookies from "js-cookie";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from "@/components/ui/alert-dialog";
import { LogOut } from "lucide-react";
import { userLogout } from "@/api/auth";
import { ErrorResponse } from "@/types/type";
import { AxiosError } from "axios";
import toast from "react-hot-toast";

export default function LogoutButton() {
  const router = useRouter();

  const handleLogout = async () => {
    try {
      const res = await userLogout();

      if (res?.data.statusCode == 200 || res?.data.statusCode == 201) {
        Cookies.remove("authToken");
        toast.success("Logout successful");
        router.push("/");
      }
    } catch (error) {
      const axiosError = error as AxiosError<ErrorResponse>;
      const errorMessage =
        axiosError.response?.data?.message || "Error in logging out";
      console.log(errorMessage);
      toast.error(errorMessage);
    }
  };

  return (
    <AlertDialog>
      <AlertDialogTrigger className="flex w-full items-center gap-x-2 text-[#64748B] text-sm font-medium px-3 py-2 rounded-lg hover:bg-[#F1F5F9] transition-colors">
        <LogOut className="h-5 w-5" />
        Logout
      </AlertDialogTrigger>
      <AlertDialogContent className="bg-white">
        <AlertDialogHeader>
          <AlertDialogTitle>Confirm Logout</AlertDialogTitle>
          <AlertDialogDescription>
            Are you sure you want to logout? You'll need to login again to
            access your account.
          </AlertDialogDescription>
        </AlertDialogHeader>
        <AlertDialogFooter>
          <AlertDialogCancel className="bg-gray-100 hover:bg-gray-200 hover:text-black">
            Cancel
          </AlertDialogCancel>
          <AlertDialogAction
            onClick={handleLogout}
            className="bg-primary hover:bg-primary/90"
          >
            Logout
          </AlertDialogAction>
        </AlertDialogFooter>
      </AlertDialogContent>
    </AlertDialog>
  );
}




==================================================================
FILE: ./components/overview.tsx
==================================================================
"use client";

import {
  Bar,
  BarChart,
  ResponsiveContainer,
  XAxis,
  YAxis,
  Tooltip,
} from "recharts";

const data = [
  { month: "Jan", revenue: 4000, costs: 2400 },
  { month: "Feb", revenue: 3000, costs: 1398 },
  { month: "Mar", revenue: 2000, costs: 9800 },
  { month: "Apr", revenue: 2780, costs: 3908 },
  { month: "May", revenue: 1890, costs: 4800 },
  { month: "Jun", revenue: 2390, costs: 3800 },
  { month: "Jul", revenue: 3490, costs: 4300 },
  { month: "Aug", revenue: 4000, costs: 2400 },
  { month: "Sep", revenue: 3000, costs: 1398 },
  { month: "Oct", revenue: 2000, costs: 9800 },
  { month: "Nov", revenue: 2780, costs: 3908 },
  { month: "Dec", revenue: 1890, costs: 4800 },
];

export function Overview() {
  return (
    <div className="h-[350px] mt-4">
      <ResponsiveContainer width="100%" height="100%">
        <BarChart
          data={data}
          margin={{ top: 0, right: 0, left: -10, bottom: 0 }}
        >
          <XAxis
            dataKey="month"
            stroke="#94A3B8"
            fontSize={12}
            tickLine={false}
            axisLine={false}
          />
          <YAxis
            stroke="#94A3B8"
            fontSize={12}
            tickLine={false}
            axisLine={false}
            tickFormatter={(value) => `₹${value}`}
          />
          <Tooltip
            cursor={{ fill: "#F1F5F9" }}
            contentStyle={{
              backgroundColor: "#FFFFFF",
              border: "1px solid #E2E8F0",
              borderRadius: "6px",
              boxShadow: "0 2px 4px rgba(0,0,0,0.05)",
            }}
            labelStyle={{ color: "#1E293B", fontWeight: 500 }}
          />
          <Bar
            dataKey="revenue"
            fill="#7C3AED"
            radius={[4, 4, 0, 0]}
            name="Revenue"
          />
          <Bar
            dataKey="costs"
            fill="#A5B4FC"
            radius={[4, 4, 0, 0]}
            name="Costs"
          />
        </BarChart>
      </ResponsiveContainer>
    </div>
  );
}




==================================================================
FILE: ./components/recent-sales.tsx
==================================================================
"use client";

import { Avatar, AvatarFallback } from "@/components/ui/avatar";

const recentSales = [
  {
    name: "Rajesh Kumar",
    email: "rajesh@example.com",
    amount: "₹45,000",
    status: "completed",
  },
  {
    name: "Priya Sharma",
    email: "priya@example.com",
    amount: "₹78,500",
    status: "pending",
  },
  {
    name: "Amit Patel",
    email: "amit@example.com",
    amount: "₹23,900",
    status: "completed",
  },
  {
    name: "Sneha Verma",
    email: "sneha@example.com",
    amount: "₹92,000",
    status: "processing",
  },
  {
    name: "Vikram Singh",
    email: "vikram@example.com",
    amount: "₹17,500",
    status: "completed",
  },
];

export function RecentSales() {
  return (
    <div className="space-y-8 mt-4">
      {recentSales.map((sale) => (
        <div key={sale.email} className="flex items-center">
          <Avatar className="h-9 w-9">
            <AvatarFallback>
              {sale.name
                .split(" ")
                .map((n) => n[0])
                .join("")}
            </AvatarFallback>
          </Avatar>
          <div className="ml-4 space-y-1">
            <p className="text-sm font-medium leading-none">{sale.name}</p>
            <p className="text-sm text-muted-foreground">{sale.email}</p>
          </div>
          <div className="ml-auto font-medium">
            <div className="flex flex-col items-end">
              <span>{sale.amount}</span>
              <span
                className={`text-xs ${
                  sale.status === "completed"
                    ? "text-green-500"
                    : sale.status === "pending"
                    ? "text-yellow-500"
                    : "text-blue-500"
                }`}
              >
                {sale.status.charAt(0).toUpperCase() + sale.status.slice(1)}
              </span>
            </div>
          </div>
        </div>
      ))}
    </div>
  );
}




==================================================================
FILE: ./components/sidebar.tsx
==================================================================
"use client";

import Link from "next/link";
import { usePathname } from "next/navigation";
import { cn } from "@/lib/utils";
import {
  LayoutDashboard,
  ShoppingCart,
  IndianRupee,
  Building2,
  Store,
  Warehouse,
} from "lucide-react";
import LogoutButton from "./logout-button";

const routes = [
  {
    label: "Dashboard",
    icon: LayoutDashboard,
    href: "/dashboard",
  },
  {
    label: "Purchases",
    icon: ShoppingCart,
    href: "/purchase",
  },
  {
    label: "Vendors",
    icon: Building2, // Changed to represent business entities
    href: "/vendors",
  },
  {
    label: "Sales Orders",
    icon: IndianRupee, // Changed to Indian Rupee symbol
    href: "/sales",
  },
  {
    label: "Customers",
    icon: Store, // Changed to represent retail/business customers
    href: "/customers",
  },
  {
    label: "Inventory",
    icon: Warehouse, // Changed to better represent inventory storage
    href: "/inventory",
  },
  // {
  //   label: "Analytics",
  //   icon: BarChart3,
  //   href: "/analytics",
  // },
];

export function Sidebar() {
  const pathname = usePathname();

  return (
    <div className="flex flex-col h-full w-64 bg-[#F8FAFC] border-r border-gray-200">
      <div className="p-6">
        <h1 className="text-xl font-bold text-text flex items-center tracking-tight">
          Gayatri Industries
        </h1>
      </div>
      <div className="flex-1 px-3 flex flex-col gap-y-5">
        {routes.map((route) => (
          <Link
            key={route.href}
            href={route.href}
            className={cn(
              "flex items-center gap-x-2  text-[#64748B] text-base font-medium px-3 py-3 rounded-lg hover:bg-[#F1F5F9] transition-colors",
              pathname === route.href && "bg-[#F1F5F9] text-[#7C3AED]"
            )}
          >
            <route.icon
              className={cn(
                "h-5 w-5",
                pathname === route.href && "text-primary"
              )}
            />
            {route.label}
          </Link>
        ))}
      </div>
      {/* Logout section at bottom */}
      <div className="border-t border-gray-200 p-3">
        <LogoutButton />
      </div>
    </div>
  );
}




==================================================================
FILE: ./components/stats-cards.tsx
==================================================================
"use client";

import { Card, CardContent } from "@/components/ui/card";
import { TrendingUp, TrendingDown } from "lucide-react";

export function StatsCards() {
  return (
    <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-4">
      <Card className="stats-card">
        <CardContent className="p-6">
          <div className="space-y-1">
            <p className="text-sm font-medium text-[#64748B]">Gross Sales</p>
            <div className="flex items-baseline space-x-2">
              <h3 className="text-2xl font-semibold text-[#1E293B]">₹22,892</h3>
              <div className="flex items-center text-[#16A34A] text-sm">
                <TrendingUp className="w-4 h-4 mr-1" />
                <span>26%</span>
                <span className="text-[#64748B] ml-1">+1.42k today</span>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      <Card className="stats-card">
        <CardContent className="p-6">
          <div className="space-y-1">
            <p className="text-sm font-medium text-[#64748B]">Average Sales</p>
            <div className="flex items-baseline space-x-2">
              <h3 className="text-2xl font-semibold text-[#1E293B]">₹8,283</h3>
              <div className="flex items-center text-[#16A34A] text-sm">
                <TrendingUp className="w-4 h-4 mr-1" />
                <span>23%</span>
                <span className="text-[#64748B] ml-1">+0.34k today</span>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      <Card className="stats-card">
        <CardContent className="p-6">
          <div className="space-y-1">
            <p className="text-sm font-medium text-[#64748B]">New Sales</p>
            <div className="flex items-baseline space-x-2">
              <h3 className="text-2xl font-semibold text-[#1E293B]">₹1,853</h3>
              <div className="flex items-center text-[#DC2626] text-sm">
                <TrendingDown className="w-4 h-4 mr-1" />
                <span>2.4%</span>
                <span className="text-[#64748B] ml-1">+0.45 today</span>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      <Card className="stats-card">
        <CardContent className="p-6">
          <div className="space-y-1">
            <p className="text-sm font-medium text-[#64748B]">Gross Profits</p>
            <div className="flex items-baseline space-x-2">
              <h3 className="text-2xl font-semibold text-[#1E293B]">₹5,239</h3>
              <div className="flex items-center text-[#16A34A] text-sm">
                <TrendingUp className="w-4 h-4 mr-1" />
                <span>14.4%</span>
                <span className="text-[#64748B] ml-1">+0.5k today</span>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}




==================================================================
FILE: ./components/theme-provider.tsx
==================================================================
"use client";

import { ThemeProvider as NextThemesProvider } from "next-themes";

interface ThemeProviderProps {
  children: React.ReactNode;
  attribute?: string;
  defaultTheme?: string;
}

export function ThemeProvider({ children }: ThemeProviderProps) {
  return (
    <NextThemesProvider attribute="class" defaultTheme="system" enableSystem>
      {children}
    </NextThemesProvider>
  );
}




==================================================================
FILE: ./components/ui/DatePicker.tsx
==================================================================
import React from "react";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { Button } from "@/components/ui/button";
import { CalendarIcon, ChevronLeftIcon, ChevronRightIcon } from "lucide-react";
import { format } from "date-fns";
import { cn } from "@/lib/utils";
import { DayPicker } from "react-day-picker";
import "react-day-picker/dist/style.css";

interface DatePickerProps {
  date: Date | undefined;
  onDateChange: (date: Date | undefined) => void;
}

const DatePicker = ({ date, onDateChange }: DatePickerProps) => {
  return (
    <Popover>
      <PopoverTrigger asChild>
        <Button
          variant="outline"
          className={cn(
            "w-full justify-start text-left font-normal",
            !date && "text-muted-foreground"
          )}
        >
          <CalendarIcon className="mr-2 h-4 w-4" />
          {date ? format(date, "PPP") : <span>Pick a date</span>}
        </Button>
      </PopoverTrigger>
      <PopoverContent className="w-auto p-0" align="start">
        <DayPicker
          mode="single"
          selected={date}
          onSelect={onDateChange}
          className="border-none"
          classNames={{
            months:
              "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
            month: "space-y-4",
            caption: "flex justify-center pt-1 relative items-center",
            caption_label: "text-sm font-medium",
            nav: "space-x-1 flex items-center",
            nav_button: cn(
              "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100"
            ),
            nav_button_previous: "absolute left-1",
            nav_button_next: "absolute right-1",
            table: "w-full border-collapse space-y-1",
            head_row: "flex",
            head_cell:
              "text-muted-foreground rounded-md w-8 font-normal text-[0.8rem]",
            row: "flex w-full mt-2",
            cell: cn(
              "relative p-0 text-center text-sm focus-within:relative focus-within:z-20 [&:has([aria-selected])]:bg-accent",
              "first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md"
            ),
            day: cn(
              "h-8 w-8 p-0 font-normal aria-selected:opacity-100 rounded-md",
              "hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground"
            ),
            day_selected:
              "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
            day_today: "bg-accent text-accent-foreground",
            day_outside: "text-muted-foreground opacity-50",
            day_disabled: "text-muted-foreground opacity-50",
            day_range_middle:
              "aria-selected:bg-accent aria-selected:text-accent-foreground",
            day_hidden: "invisible",
          }}
          components={
            {
              // IconLeft: () => <ChevronLeftIcon className="h-4 w-4" />,
              // IconRight: () => <ChevronRightIcon className="h-4 w-4" />,
            }
          }
        />
      </PopoverContent>
    </Popover>
  );
};

export default DatePicker;




==================================================================
FILE: ./components/ui/accordion.tsx
==================================================================
"use client";

import * as React from "react";
import * as AccordionPrimitive from "@radix-ui/react-accordion";
import { ChevronDown } from "lucide-react";

import { cn } from "@/lib/utils";

const Accordion = AccordionPrimitive.Root;

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
));
AccordionItem.displayName = "AccordionItem";

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
));
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName;

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
));

AccordionContent.displayName = AccordionPrimitive.Content.displayName;

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent };




==================================================================
FILE: ./components/ui/alert-dialog.tsx
==================================================================
'use client';

import * as React from 'react';
import * as AlertDialogPrimitive from '@radix-ui/react-alert-dialog';

import { cn } from '@/lib/utils';
import { buttonVariants } from '@/components/ui/button';

const AlertDialog = AlertDialogPrimitive.Root;

const AlertDialogTrigger = AlertDialogPrimitive.Trigger;

const AlertDialogPortal = AlertDialogPrimitive.Portal;

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      'fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0',
      className
    )}
    {...props}
    ref={ref}
  />
));
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName;

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        'fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg',
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
));
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName;

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      'flex flex-col space-y-2 text-center sm:text-left',
      className
    )}
    {...props}
  />
);
AlertDialogHeader.displayName = 'AlertDialogHeader';

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      'flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2',
      className
    )}
    {...props}
  />
);
AlertDialogFooter.displayName = 'AlertDialogFooter';

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn('text-lg font-semibold', className)}
    {...props}
  />
));
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName;

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn('text-sm text-muted-foreground', className)}
    {...props}
  />
));
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName;

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
));
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName;

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: 'outline' }),
      'mt-2 sm:mt-0',
      className
    )}
    {...props}
  />
));
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName;

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
};




==================================================================
FILE: ./components/ui/alert.tsx
==================================================================
import * as React from 'react';
import { cva, type VariantProps } from 'class-variance-authority';

import { cn } from '@/lib/utils';

const alertVariants = cva(
  'relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground',
  {
    variants: {
      variant: {
        default: 'bg-background text-foreground',
        destructive:
          'border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive',
      },
    },
    defaultVariants: {
      variant: 'default',
    },
  }
);

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
));
Alert.displayName = 'Alert';

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn('mb-1 font-medium leading-none tracking-tight', className)}
    {...props}
  />
));
AlertTitle.displayName = 'AlertTitle';

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn('text-sm [&_p]:leading-relaxed', className)}
    {...props}
  />
));
AlertDescription.displayName = 'AlertDescription';

export { Alert, AlertTitle, AlertDescription };




==================================================================
FILE: ./components/ui/avatar.tsx
==================================================================
"use client";

import * as React from "react";
import * as AvatarPrimitive from "@radix-ui/react-avatar";

import { cn } from "@/lib/utils";

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
));
Avatar.displayName = AvatarPrimitive.Root.displayName;

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
));
AvatarImage.displayName = AvatarPrimitive.Image.displayName;

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted ",
      className
    )}
    {...props}
  />
));
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName;

export { Avatar, AvatarImage, AvatarFallback };




==================================================================
FILE: ./components/ui/badge.tsx
==================================================================
import * as React from 'react';
import { cva, type VariantProps } from 'class-variance-authority';

import { cn } from '@/lib/utils';

const badgeVariants = cva(
  'inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2',
  {
    variants: {
      variant: {
        default:
          'border-transparent bg-primary text-primary-foreground hover:bg-primary/80',
        secondary:
          'border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80',
        destructive:
          'border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80',
        outline: 'text-foreground',
      },
    },
    defaultVariants: {
      variant: 'default',
    },
  }
);

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  );
}

export { Badge, badgeVariants };




==================================================================
FILE: ./components/ui/breadcrumb.tsx
==================================================================
import * as React from 'react';
import { Slot } from '@radix-ui/react-slot';
import { ChevronRight, MoreHorizontal } from 'lucide-react';

import { cn } from '@/lib/utils';

const Breadcrumb = React.forwardRef<
  HTMLElement,
  React.ComponentPropsWithoutRef<'nav'> & {
    separator?: React.ReactNode;
  }
>(({ ...props }, ref) => <nav ref={ref} aria-label="breadcrumb" {...props} />);
Breadcrumb.displayName = 'Breadcrumb';

const BreadcrumbList = React.forwardRef<
  HTMLOListElement,
  React.ComponentPropsWithoutRef<'ol'>
>(({ className, ...props }, ref) => (
  <ol
    ref={ref}
    className={cn(
      'flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5',
      className
    )}
    {...props}
  />
));
BreadcrumbList.displayName = 'BreadcrumbList';

const BreadcrumbItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentPropsWithoutRef<'li'>
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    className={cn('inline-flex items-center gap-1.5', className)}
    {...props}
  />
));
BreadcrumbItem.displayName = 'BreadcrumbItem';

const BreadcrumbLink = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentPropsWithoutRef<'a'> & {
    asChild?: boolean;
  }
>(({ asChild, className, ...props }, ref) => {
  const Comp = asChild ? Slot : 'a';

  return (
    <Comp
      ref={ref}
      className={cn('transition-colors hover:text-foreground', className)}
      {...props}
    />
  );
});
BreadcrumbLink.displayName = 'BreadcrumbLink';

const BreadcrumbPage = React.forwardRef<
  HTMLSpanElement,
  React.ComponentPropsWithoutRef<'span'>
>(({ className, ...props }, ref) => (
  <span
    ref={ref}
    role="link"
    aria-disabled="true"
    aria-current="page"
    className={cn('font-normal text-foreground', className)}
    {...props}
  />
));
BreadcrumbPage.displayName = 'BreadcrumbPage';

const BreadcrumbSeparator = ({
  children,
  className,
  ...props
}: React.ComponentProps<'li'>) => (
  <li
    role="presentation"
    aria-hidden="true"
    className={cn('[&>svg]:size-3.5', className)}
    {...props}
  >
    {children ?? <ChevronRight />}
  </li>
);
BreadcrumbSeparator.displayName = 'BreadcrumbSeparator';

const BreadcrumbEllipsis = ({
  className,
  ...props
}: React.ComponentProps<'span'>) => (
  <span
    role="presentation"
    aria-hidden="true"
    className={cn('flex h-9 w-9 items-center justify-center', className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More</span>
  </span>
);
BreadcrumbEllipsis.displayName = 'BreadcrumbElipssis';

export {
  Breadcrumb,
  BreadcrumbList,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbPage,
  BreadcrumbSeparator,
  BreadcrumbEllipsis,
};




==================================================================
FILE: ./components/ui/button.tsx
==================================================================
import * as React from "react";
import { Slot } from "@radix-ui/react-slot";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";

const buttonVariants = cva(
  "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus:outline-none disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-50",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        xs: "h-7 rounded-md px-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
);

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean;
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button";
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    );
  }
);
Button.displayName = "Button";

export { Button, buttonVariants };




==================================================================
FILE: ./components/ui/card.tsx
==================================================================
import * as React from 'react';

import { cn } from '@/lib/utils';

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      'rounded-lg border bg-card text-card-foreground shadow-sm',
      className
    )}
    {...props}
  />
));
Card.displayName = 'Card';

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn('flex flex-col space-y-1.5 p-6', className)}
    {...props}
  />
));
CardHeader.displayName = 'CardHeader';

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      'text-2xl font-semibold leading-none tracking-tight',
      className
    )}
    {...props}
  />
));
CardTitle.displayName = 'CardTitle';

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn('text-sm text-muted-foreground', className)}
    {...props}
  />
));
CardDescription.displayName = 'CardDescription';

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn('p-6 pt-0', className)} {...props} />
));
CardContent.displayName = 'CardContent';

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn('flex items-center p-6 pt-0', className)}
    {...props}
  />
));
CardFooter.displayName = 'CardFooter';

export {
  Card,
  CardHeader,
  CardFooter,
  CardTitle,
  CardDescription,
  CardContent,
};




==================================================================
FILE: ./components/ui/chart.tsx
==================================================================
'use client';

import * as React from 'react';
import * as RechartsPrimitive from 'recharts';

import { cn } from '@/lib/utils';

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: '', dark: '.dark' } as const;

export type ChartConfig = {
  [k in string]: {
    label?: React.ReactNode;
    icon?: React.ComponentType;
  } & (
    | { color?: string; theme?: never }
    | { color?: never; theme: Record<keyof typeof THEMES, string> }
  );
};

type ChartContextProps = {
  config: ChartConfig;
};

const ChartContext = React.createContext<ChartContextProps | null>(null);

function useChart() {
  const context = React.useContext(ChartContext);

  if (!context) {
    throw new Error('useChart must be used within a <ChartContainer />');
  }

  return context;
}

const ChartContainer = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<'div'> & {
    config: ChartConfig;
    children: React.ComponentProps<
      typeof RechartsPrimitive.ResponsiveContainer
    >['children'];
  }
>(({ id, className, children, config, ...props }, ref) => {
  const uniqueId = React.useId();
  const chartId = `chart-${id || uniqueId.replace(/:/g, '')}`;

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-chart={chartId}
        ref={ref}
        className={cn(
          "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
          className
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>
          {children}
        </RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  );
});
ChartContainer.displayName = 'Chart';

const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
  const colorConfig = Object.entries(config).filter(
    ([_, config]) => config.theme || config.color
  );

  if (!colorConfig.length) {
    return null;
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color =
      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
      itemConfig.color;
    return color ? `  --color-${key}: ${color};` : null;
  })
  .join('\n')}
}
`
          )
          .join('\n'),
      }}
    />
  );
};

const ChartTooltip = RechartsPrimitive.Tooltip;

const ChartTooltipContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
    React.ComponentProps<'div'> & {
      hideLabel?: boolean;
      hideIndicator?: boolean;
      indicator?: 'line' | 'dot' | 'dashed';
      nameKey?: string;
      labelKey?: string;
    }
>(
  (
    {
      active,
      payload,
      className,
      indicator = 'dot',
      hideLabel = false,
      hideIndicator = false,
      label,
      labelFormatter,
      labelClassName,
      formatter,
      color,
      nameKey,
      labelKey,
    },
    ref
  ) => {
    const { config } = useChart();

    const tooltipLabel = React.useMemo(() => {
      if (hideLabel || !payload?.length) {
        return null;
      }

      const [item] = payload;
      const key = `${labelKey || item.dataKey || item.name || 'value'}`;
      const itemConfig = getPayloadConfigFromPayload(config, item, key);
      const value =
        !labelKey && typeof label === 'string'
          ? config[label as keyof typeof config]?.label || label
          : itemConfig?.label;

      if (labelFormatter) {
        return (
          <div className={cn('font-medium', labelClassName)}>
            {labelFormatter(value, payload)}
          </div>
        );
      }

      if (!value) {
        return null;
      }

      return <div className={cn('font-medium', labelClassName)}>{value}</div>;
    }, [
      label,
      labelFormatter,
      payload,
      hideLabel,
      labelClassName,
      config,
      labelKey,
    ]);

    if (!active || !payload?.length) {
      return null;
    }

    const nestLabel = payload.length === 1 && indicator !== 'dot';

    return (
      <div
        ref={ref}
        className={cn(
          'grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl',
          className
        )}
      >
        {!nestLabel ? tooltipLabel : null}
        <div className="grid gap-1.5">
          {payload.map((item, index) => {
            const key = `${nameKey || item.name || item.dataKey || 'value'}`;
            const itemConfig = getPayloadConfigFromPayload(config, item, key);
            const indicatorColor = color || item.payload.fill || item.color;

            return (
              <div
                key={item.dataKey}
                className={cn(
                  'flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground',
                  indicator === 'dot' && 'items-center'
                )}
              >
                {formatter && item?.value !== undefined && item.name ? (
                  formatter(item.value, item.name, item, index, item.payload)
                ) : (
                  <>
                    {itemConfig?.icon ? (
                      <itemConfig.icon />
                    ) : (
                      !hideIndicator && (
                        <div
                          className={cn(
                            'shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]',
                            {
                              'h-2.5 w-2.5': indicator === 'dot',
                              'w-1': indicator === 'line',
                              'w-0 border-[1.5px] border-dashed bg-transparent':
                                indicator === 'dashed',
                              'my-0.5': nestLabel && indicator === 'dashed',
                            }
                          )}
                          style={
                            {
                              '--color-bg': indicatorColor,
                              '--color-border': indicatorColor,
                            } as React.CSSProperties
                          }
                        />
                      )
                    )}
                    <div
                      className={cn(
                        'flex flex-1 justify-between leading-none',
                        nestLabel ? 'items-end' : 'items-center'
                      )}
                    >
                      <div className="grid gap-1.5">
                        {nestLabel ? tooltipLabel : null}
                        <span className="text-muted-foreground">
                          {itemConfig?.label || item.name}
                        </span>
                      </div>
                      {item.value && (
                        <span className="font-mono font-medium tabular-nums text-foreground">
                          {item.value.toLocaleString()}
                        </span>
                      )}
                    </div>
                  </>
                )}
              </div>
            );
          })}
        </div>
      </div>
    );
  }
);
ChartTooltipContent.displayName = 'ChartTooltip';

const ChartLegend = RechartsPrimitive.Legend;

const ChartLegendContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<'div'> &
    Pick<RechartsPrimitive.LegendProps, 'payload' | 'verticalAlign'> & {
      hideIcon?: boolean;
      nameKey?: string;
    }
>(
  (
    { className, hideIcon = false, payload, verticalAlign = 'bottom', nameKey },
    ref
  ) => {
    const { config } = useChart();

    if (!payload?.length) {
      return null;
    }

    return (
      <div
        ref={ref}
        className={cn(
          'flex items-center justify-center gap-4',
          verticalAlign === 'top' ? 'pb-3' : 'pt-3',
          className
        )}
      >
        {payload.map((item) => {
          const key = `${nameKey || item.dataKey || 'value'}`;
          const itemConfig = getPayloadConfigFromPayload(config, item, key);

          return (
            <div
              key={item.value}
              className={cn(
                'flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground'
              )}
            >
              {itemConfig?.icon && !hideIcon ? (
                <itemConfig.icon />
              ) : (
                <div
                  className="h-2 w-2 shrink-0 rounded-[2px]"
                  style={{
                    backgroundColor: item.color,
                  }}
                />
              )}
              {itemConfig?.label}
            </div>
          );
        })}
      </div>
    );
  }
);
ChartLegendContent.displayName = 'ChartLegend';

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(
  config: ChartConfig,
  payload: unknown,
  key: string
) {
  if (typeof payload !== 'object' || payload === null) {
    return undefined;
  }

  const payloadPayload =
    'payload' in payload &&
    typeof payload.payload === 'object' &&
    payload.payload !== null
      ? payload.payload
      : undefined;

  let configLabelKey: string = key;

  if (
    key in payload &&
    typeof payload[key as keyof typeof payload] === 'string'
  ) {
    configLabelKey = payload[key as keyof typeof payload] as string;
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key as keyof typeof payloadPayload] === 'string'
  ) {
    configLabelKey = payloadPayload[
      key as keyof typeof payloadPayload
    ] as string;
  }

  return configLabelKey in config
    ? config[configLabelKey]
    : config[key as keyof typeof config];
}

export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
};




==================================================================
FILE: ./components/ui/collapsible.tsx
==================================================================
'use client';

import * as CollapsiblePrimitive from '@radix-ui/react-collapsible';

const Collapsible = CollapsiblePrimitive.Root;

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger;

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent;

export { Collapsible, CollapsibleTrigger, CollapsibleContent };




==================================================================
FILE: ./components/ui/dialog.tsx
==================================================================
// ./components/ui/dialog.tsx
"use client";

import * as React from "react";
import * as DialogPrimitive from "@radix-ui/react-dialog";
import { X } from "lucide-react";

import { cn } from "@/lib/utils";

const Dialog = DialogPrimitive.Root;

const DialogTrigger = DialogPrimitive.Trigger;

const DialogPortal = DialogPrimitive.Portal;

const DialogClose = DialogPrimitive.Close;

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
));
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName;

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
));
DialogContent.displayName = DialogPrimitive.Content.displayName;

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
);
DialogHeader.displayName = "DialogHeader";

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
);
DialogFooter.displayName = "DialogFooter";

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
));
DialogTitle.displayName = DialogPrimitive.Title.displayName;

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
));
DialogDescription.displayName = DialogPrimitive.Description.displayName;

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
};




==================================================================
FILE: ./components/ui/dropdown-menu.tsx
==================================================================
"use client";

import * as React from "react";
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu";
import { Check, ChevronRight, Circle } from "lucide-react";

import { cn } from "@/lib/utils";

const DropdownMenu = DropdownMenuPrimitive.Root;

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger;

const DropdownMenuGroup = DropdownMenuPrimitive.Group;

const DropdownMenuPortal = DropdownMenuPrimitive.Portal;

const DropdownMenuSub = DropdownMenuPrimitive.Sub;

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup;

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean;
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </DropdownMenuPrimitive.SubTrigger>
));
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName;

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
));
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName;

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
));
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName;

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean;
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
));
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName;

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
));
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName;

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
));
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName;

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean;
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
));
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName;

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
));
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName;

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  );
};
DropdownMenuShortcut.displayName = "DropdownMenuShortcut";

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
};




==================================================================
FILE: ./components/ui/form.tsx
==================================================================
'use client';

import * as React from 'react';
import * as LabelPrimitive from '@radix-ui/react-label';
import { Slot } from '@radix-ui/react-slot';
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
  FormProvider,
  useFormContext,
} from 'react-hook-form';

import { cn } from '@/lib/utils';
import { Label } from '@/components/ui/label';

const Form = FormProvider;

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName;
};

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
);

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  );
};

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext);
  const itemContext = React.useContext(FormItemContext);
  const { getFieldState, formState } = useFormContext();

  const fieldState = getFieldState(fieldContext.name, formState);

  if (!fieldContext) {
    throw new Error('useFormField should be used within <FormField>');
  }

  const { id } = itemContext;

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  };
};

type FormItemContextValue = {
  id: string;
};

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
);

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId();

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn('space-y-2', className)} {...props} />
    </FormItemContext.Provider>
  );
});
FormItem.displayName = 'FormItem';

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField();

  return (
    <Label
      ref={ref}
      className={cn(error && 'text-destructive', className)}
      htmlFor={formItemId}
      {...props}
    />
  );
});
FormLabel.displayName = 'FormLabel';

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } =
    useFormField();

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  );
});
FormControl.displayName = 'FormControl';

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField();

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn('text-sm text-muted-foreground', className)}
      {...props}
    />
  );
});
FormDescription.displayName = 'FormDescription';

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField();
  const body = error ? String(error?.message) : children;

  if (!body) {
    return null;
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn('text-sm font-medium text-destructive', className)}
      {...props}
    >
      {body}
    </p>
  );
});
FormMessage.displayName = 'FormMessage';

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
};




==================================================================
FILE: ./components/ui/input.tsx
==================================================================
import * as React from "react";
import { cn } from "@/lib/utils";

export interface InputProps
  extends React.InputHTMLAttributes<HTMLInputElement> {}

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus:outline-none disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    );
  }
);
Input.displayName = "Input";

export { Input };




==================================================================
FILE: ./components/ui/label.tsx
==================================================================
"use client";

import * as React from "react";
import * as LabelPrimitive from "@radix-ui/react-label";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
);

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
));
Label.displayName = LabelPrimitive.Root.displayName;

export { Label };




==================================================================
FILE: ./components/ui/pagination.tsx
==================================================================
import * as React from "react";
import { ChevronLeft, ChevronRight, MoreHorizontal } from "lucide-react";

import { cn } from "@/lib/utils";
import { ButtonProps, buttonVariants } from "@/components/ui/button";

const Pagination = ({ className, ...props }: React.ComponentProps<"nav">) => (
  <nav
    role="navigation"
    aria-label="pagination"
    className={cn("mx-auto flex w-full justify-center", className)}
    {...props}
  />
);
Pagination.displayName = "Pagination";

const PaginationContent = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    className={cn("flex flex-row items-center gap-1", className)}
    {...props}
  />
));
PaginationContent.displayName = "PaginationContent";

const PaginationItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li ref={ref} className={cn("", className)} {...props} />
));
PaginationItem.displayName = "PaginationItem";

type PaginationLinkProps = {
  isActive?: boolean;
} & Pick<ButtonProps, "size"> &
  React.ComponentProps<"a">;

const PaginationLink = ({
  className,
  isActive,
  size = "icon",
  ...props
}: PaginationLinkProps) => (
  <a
    aria-current={isActive ? "page" : undefined}
    className={cn(
      buttonVariants({
        variant: isActive ? "outline" : "ghost",
        size,
      }),
      className
    )}
    {...props}
  />
);
PaginationLink.displayName = "PaginationLink";

const PaginationPrevious = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to previous page"
    size="default"
    className={cn("gap-1 pl-2.5", className)}
    {...props}
  >
    <ChevronLeft className="h-4 w-4" />
    <span>Previous</span>
  </PaginationLink>
);
PaginationPrevious.displayName = "PaginationPrevious";

const PaginationNext = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to next page"
    size="default"
    className={cn("gap-1 pr-2.5", className)}
    {...props}
  >
    <span>Next</span>
    <ChevronRight className="h-4 w-4" />
  </PaginationLink>
);
PaginationNext.displayName = "PaginationNext";

const PaginationEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    aria-hidden
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More pages</span>
  </span>
);
PaginationEllipsis.displayName = "PaginationEllipsis";

export {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
};




==================================================================
FILE: ./components/ui/popover.tsx
==================================================================
"use client";

import * as React from "react";
import * as PopoverPrimitive from "@radix-ui/react-popover";

import { cn } from "@/lib/utils";

const Popover = PopoverPrimitive.Root;

const PopoverTrigger = PopoverPrimitive.Trigger;

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
));
PopoverContent.displayName = PopoverPrimitive.Content.displayName;

export { Popover, PopoverTrigger, PopoverContent };




==================================================================
FILE: ./components/ui/select.tsx
==================================================================
"use client";

import * as React from "react";
import * as SelectPrimitive from "@radix-ui/react-select";
import { Check, ChevronDown, ChevronUp } from "lucide-react";

import { cn } from "@/lib/utils";

const Select = SelectPrimitive.Root;

const SelectGroup = SelectPrimitive.Group;

const SelectValue = SelectPrimitive.Value;

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm placeholder:text-muted-foreground focus:outline-none disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
));
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName;

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
));
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName;

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
));
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName;

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
));
SelectContent.displayName = SelectPrimitive.Content.displayName;

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props}
  />
));
SelectLabel.displayName = SelectPrimitive.Label.displayName;

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
));
SelectItem.displayName = SelectPrimitive.Item.displayName;

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
));
SelectSeparator.displayName = SelectPrimitive.Separator.displayName;

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
};




==================================================================
FILE: ./components/ui/separator.tsx
==================================================================
"use client";

import * as React from "react";
import * as SeparatorPrimitive from "@radix-ui/react-separator";

import { cn } from "@/lib/utils";

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
);
Separator.displayName = SeparatorPrimitive.Root.displayName;

export { Separator };



==================================================================
FILE: ./components/ui/skeleton.tsx
==================================================================
import { cn } from "@/lib/utils";

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-muted", className)}
      {...props}
    />
  );
}

export { Skeleton };




==================================================================
FILE: ./components/ui/switch.tsx
==================================================================
"use client";

import * as React from "react";
import * as SwitchPrimitives from "@radix-ui/react-switch";

import { cn } from "@/lib/utils";

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
));
Switch.displayName = SwitchPrimitives.Root.displayName;

export { Switch };




==================================================================
FILE: ./components/ui/table.tsx
==================================================================
import * as React from "react";

import { cn } from "@/lib/utils";

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
));
Table.displayName = "Table";

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
));
TableHeader.displayName = "TableHeader";

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
));
TableBody.displayName = "TableBody";

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
));
TableFooter.displayName = "TableFooter";

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
));
TableRow.displayName = "TableRow";

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
));
TableHead.displayName = "TableHead";

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
));
TableCell.displayName = "TableCell";

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
));
TableCaption.displayName = "TableCaption";

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
};




==================================================================
FILE: ./components/ui/tabs.tsx
==================================================================
"use client";

import * as React from "react";
import * as TabsPrimitive from "@radix-ui/react-tabs";

import { cn } from "@/lib/utils";

const Tabs = TabsPrimitive.Root;

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
));
TabsList.displayName = TabsPrimitive.List.displayName;

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    )}
    {...props}
  />
));
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName;

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
));
TabsContent.displayName = TabsPrimitive.Content.displayName;

export { Tabs, TabsList, TabsTrigger, TabsContent };




==================================================================
FILE: ./components/ui/textarea.tsx
==================================================================
import * as React from "react";

import { cn } from "@/lib/utils";

export interface TextareaProps
  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}

const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(
  ({ className, ...props }, ref) => {
    return (
      <textarea
        className={cn(
          "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    );
  }
);
Textarea.displayName = "Textarea";

export { Textarea };




==================================================================
FILE: ./contexts/globalContext.tsx
==================================================================
"use client";
import { createContext, useContext } from "react";
import { ThemeProvider } from "@/components/theme-provider";
import { UserContextProvider } from "./userContext";

const GlobalContext = createContext({});

export const GlobalContextProvider = ({
  children,
}: {
  children: React.ReactNode;
}) => {
  return (
    <GlobalContext.Provider value={{}}>
      <ThemeProvider attribute="class" defaultTheme="light">
        <UserContextProvider>{children}</UserContextProvider>
      </ThemeProvider>
    </GlobalContext.Provider>
  );
};

export const useGlobal = () => useContext(GlobalContext);




==================================================================
FILE: ./contexts/userContext.tsx
==================================================================
"use client";
import {
  createContext,
  useContext,
  useEffect,
  useState,
  ReactNode,
} from "react";
import { getCurrentUser } from "@/api/auth";
import { getToken } from "@/utils/getToken";
import { User } from "@/types/type";

interface UserContextType {
  user: User | undefined;
}

export const UserContext = createContext<UserContextType>({ user: undefined });

interface UserContextProviderProps {
  children: ReactNode;
}

export const UserContextProvider = ({ children }: UserContextProviderProps) => {
  const [user, setUser] = useState<User | undefined>();
  const token = getToken();

  const fetchCurrentUser = async () => {
    try {
      const response = await getCurrentUser();
      if (response?.data?.statusCode === 200) {
        setUser(response.data.data);
      }
    } catch (error) {
      console.error("Error fetching user:", error);
    }
  };

  useEffect(() => {
    if (!token) return;
    fetchCurrentUser();
  }, [token]);

  return (
    <UserContext.Provider value={{ user }}>{children}</UserContext.Provider>
  );
};

export const useUser = () => useContext(UserContext);




==================================================================
FILE: ./lib/utils.ts
==================================================================
import { clsx, type ClassValue } from 'clsx';
import { twMerge } from 'tailwind-merge';

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}




==================================================================
FILE: ./next.config.js
==================================================================
/** @type {import('next').NextConfig} */
const nextConfig = {
  output: 'export',
  eslint: {
    ignoreDuringBuilds: true,
  },
  images: { unoptimized: true },
};

module.exports = nextConfig;




==================================================================
FILE: ./out/_next/static/tSrsVFOIOhrYkNsvpuHQQ/_buildManifest.js
==================================================================
self.__BUILD_MANIFEST={__rewrites:{afterFiles:[],beforeFiles:[],fallback:[]},"/_error":["static/chunks/pages/_error-d6107f1aac0c574c.js"],sortedPages:["/_app","/_error"]},self.__BUILD_MANIFEST_CB&&self.__BUILD_MANIFEST_CB();



==================================================================
FILE: ./out/_next/static/tSrsVFOIOhrYkNsvpuHQQ/_ssgManifest.js
==================================================================
self.__SSG_MANIFEST=new Set([]);self.__SSG_MANIFEST_CB&&self.__SSG_MANIFEST_CB()



==================================================================
FILE: ./postcss.config.js
==================================================================
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};




==================================================================
FILE: ./tailwind.config.ts
==================================================================
import type { Config } from "tailwindcss";

const config = {
  darkMode: ["class"],
  content: [
    "./pages/**/*.{ts,tsx}",
    "./components/**/*.{ts,tsx}",
    "./app/**/*.{ts,tsx}",
    "./src/**/*.{ts,tsx}",
  ],
  prefix: "",
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "#7C3AED", // Violet-600
          50: "#F5F3FF",
          100: "#EDE9FE",
          200: "#DDD6FE",
          300: "#C4B5FD",
          400: "#A78BFA",
          500: "#8B5CF6",
          600: "#7C3AED",
          700: "#6D28D9",
          800: "#5B21B6",
          900: "#4C1D95",
          950: "#2E1065",
          foreground: "#ffffff",
        },
        secondary: {
          DEFAULT: "#475569", // Slate-600
          50: "#F8FAFC",
          100: "#F1F5F9",
          200: "#E2E8F0",
          300: "#CBD5E1",
          400: "#94A3B8",
          500: "#64748B",
          600: "#475569",
          700: "#334155",
          800: "#1E293B",
          900: "#0F172A",
          950: "#020617",
          foreground: "#ffffff",
        },
        accent: {
          DEFAULT: "#059669", // Emerald-600
          50: "#ECFDF5",
          100: "#D1FAE5",
          200: "#A7F3D0",
          300: "#6EE7B7",
          400: "#34D399",
          500: "#10B981",
          600: "#059669",
          700: "#047857",
          800: "#065F46",
          900: "#064E3B",
          950: "#022C22",
          foreground: "#ffffff",
        },
        success: {
          DEFAULT: "#16A34A", // Green-600
          50: "#F0FDF4",
          100: "#DCFCE7",
          200: "#BBF7D0",
          300: "#86EFAC",
          400: "#4ADE80",
          500: "#22C55E",
          600: "#16A34A",
          700: "#15803D",
          800: "#166534",
          900: "#14532D",
          950: "#052E16",
          foreground: "#ffffff",
        },
        warning: {
          DEFAULT: "#EAB308", // Yellow-600
          50: "#FEFCE8",
          100: "#FEF9C3",
          200: "#FEF08A",
          300: "#FDE047",
          400: "#FACC15",
          500: "#EAB308",
          600: "#CA8A04",
          700: "#A16207",
          800: "#854D0E",
          900: "#713F12",
          950: "#422006",
          foreground: "#1E293B",
        },
        destructive: {
          DEFAULT: "#DC2626", // Red-600
          50: "#FEF2F2",
          100: "#FEE2E2",
          200: "#FECACA",
          300: "#FCA5A5",
          400: "#F87171",
          500: "#EF4444",
          600: "#DC2626",
          700: "#B91C1C",
          800: "#991B1B",
          900: "#7F1D1D",
          950: "#450A0A",
          foreground: "#ffffff",
        },
        muted: {
          DEFAULT: "#F1F5F9", // Slate-100
          foreground: "#64748B", // Slate-500
        },
        popover: {
          DEFAULT: "#ffffff",
          foreground: "#1E293B", // Slate-800
        },
        card: {
          DEFAULT: "#ffffff",
          foreground: "#1E293B", // Slate-800
        },
        text: {
          DEFAULT: "#1E293B", // Slate-800
          muted: "#64748B", // Slate-500
          bright: "#7C3AED", // Primary
          inverse: "#ffffff",
        },
      },
      // Status colors for badges
      statusColors: {
        active: "#16A34A", // Green-600
        inactive: "#64748B", // Slate-500
        pending: "#EAB308", // Yellow-600
        processing: "#2563EB", // Blue-600
        completed: "#16A34A", // Green-600
        cancelled: "#DC2626", // Red-600
      },
      // Custom shadows
      boxShadow: {
        card: "0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1)",
        dropdown:
          "0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1)",
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      keyframes: {
        "accordion-down": {
          from: { height: "0" },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: "0" },
        },
        // Added new keyframes for transitions
        "fade-in": {
          "0%": { opacity: "0" },
          "100%": { opacity: "1" },
        },
        "slide-in": {
          "0%": { transform: "translateY(10px)", opacity: "0" },
          "100%": { transform: "translateY(0)", opacity: "1" },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
        "fade-in": "fade-in 0.3s ease-out",
        "slide-in": "slide-in 0.3s ease-out",
      },
    },
  },
  plugins: [
    require("tailwindcss-animate"),
    // Additional plugin configurations can be added here
  ],
} satisfies Config;

export default config;




==================================================================
FILE: ./types/type.ts
==================================================================
export interface ErrorResponse {
  message: string;
}

export interface User {
  _id: string;
  firstName: string;
  lastName: string;
  email: string;
  role: "admin" | "sales";
}




==================================================================
FILE: ./utils/getToken.tsx
==================================================================
import Cookies from "js-cookie";

export const getToken = () => {
  if (typeof window === undefined) {
    return null;
  }
  return Cookies.get("authToken");
};
getToken.remove = () => {
  Cookies.remove("authToken");
};



